{"version":3,"sources":["components/Home.tsx","contexts/BallparkContext.tsx","components/Ballparks.tsx","components/Franchises.tsx","components/About.tsx","models/Ballpark.ts","providers/BallparkProvider.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["useStyles","makeStyles","createStyles","paper","padding","minHeight","backgroundColor","Home","classes","Grid","container","spacing","item","xs","Paper","elevation","className","Link","variant","color","href","Typography","BallparkContext","createContext","theme","head","palette","info","main","common","white","observer","ballparkStore","mapState","store","useContext","useBallparkStore","Fragment","TableContainer","component","Table","size","aria-label","TableHead","TableRow","TableCell","TableBody","ballparks","length","map","ballpark","index","NAME","CITY","STATE","AKA","colSpan","sectionHeader","fontFamily","fontWeight","sectionBreak","marginBottom","margin","width","code","borderRadius","dateStamp","flex","About","align","Ballpark","types","model","PARKID","string","START","END","LEAGUE","NOTES","BallparkStore","optional","maybeNull","array","actions","self","load","flow","loadData","fetch","response","json","applySnapshot","afterCreate","BallparkProvider","children","useState","create","Provider","value","drawerWidth","root","display","appBar","zIndex","drawer","transition","transitions","easing","sharp","duration","leavingScreen","appBarShift","marginLeft","enteringScreen","menuButton","marginRight","hide","flexShrink","whiteSpace","drawerOpen","drawerClose","overflowX","breakpoints","up","toolbar","alignItems","justifyContent","mixins","content","flexGrow","badgeSection","float","grow","toolbarHeader","App","useTheme","open","setOpen","basename","CssBaseline","AppBar","position","clsx","Toolbar","IconButton","onClick","edge","noWrap","title","Badge","Drawer","direction","Divider","List","ListItem","button","to","ListItemIcon","ListItemText","primary","Container","maxWidth","path","Franchises","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.45573414.chunk.js","sourcesContent":["import { createStyles, Grid, Link, makeStyles, Paper, Typography } from '@material-ui/core'\r\nimport React from 'react'\r\n\r\nconst useStyles = makeStyles(() =>\r\n  createStyles({\r\n    paper: {\r\n      padding: '10px',\r\n      minHeight: '50vh',\r\n      backgroundColor: '#99ccff'\r\n    }\r\n  })\r\n)\r\n\r\nconst Home: React.FC = () => {\r\n  const classes = useStyles()\r\n\r\n  return (\r\n    <Grid container spacing={3}>\r\n      <Grid item xs={4}>\r\n        <Paper elevation={3} className={classes.paper}>\r\n          <Link variant=\"h6\" color=\"inherit\" href=\"/#/about\">ABOUT</Link>\r\n          <Typography variant=\"body1\">\r\n            What is going on with this website?\r\n          </Typography>\r\n        </Paper>\r\n      </Grid>\r\n      <Grid item xs={4}>\r\n        <Paper elevation={3} className={classes.paper}>\r\n          <Link variant=\"h6\" color=\"inherit\" href=\"/#/ballparks\">BALLPARKS</Link>\r\n          <Typography variant=\"body1\">\r\n            Check out some ballparks!\r\n          </Typography>\r\n        </Paper>\r\n      </Grid>\r\n      <Grid item xs={4}>\r\n        <Paper elevation={3} className={classes.paper}>\r\n          <Link variant=\"h6\" color=\"inherit\" href=\"/#/franchises\">FRANCHISES</Link>\r\n          <Typography variant=\"body1\">\r\n            Look up current and historical baseball franchises.\r\n          </Typography>\r\n        </Paper>\r\n      </Grid>\r\n    </Grid>\r\n  )\r\n}\r\n\r\nexport default Home\r\n","import { createContext, useContext } from \"react\"\r\nimport { IBallparkStore } from '../stores/IBallpark'\r\n\r\nexport const BallparkContext = createContext<any>(null)\r\n\r\ninterface IMapState {\r\n  (store: IBallparkStore): any\r\n}\r\n\r\nexport function useBallparkStore(mapState?: IMapState): any {\r\n  const store = useContext(BallparkContext)\r\n\r\n  if (mapState) {\r\n    return mapState(store)\r\n  }\r\n\r\n  return store\r\n}\r\n","import { createStyles, makeStyles, Paper, Table, TableBody, TableCell, TableContainer, TableHead, TableRow, Typography } from '@material-ui/core'\r\nimport { observer } from 'mobx-react-lite'\r\nimport React from 'react'\r\nimport { useBallparkStore } from '../contexts/BallparkContext'\r\nimport { IBallpark } from '../stores/IBallpark'\r\n\r\nconst useStyles = makeStyles((theme) =>\r\n  createStyles({\r\n    head: {\r\n      backgroundColor: theme.palette.info.main,\r\n      color: theme.palette.common.white,\r\n    }\r\n  })\r\n)\r\n\r\nconst Ballparks: React.FC = () => {\r\n  const ballparkStore = useBallparkStore()\r\n  const classes = useStyles()\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <h4>B A L L P A R K S</h4>\r\n      <TableContainer component={Paper}>\r\n        <Table size=\"small\" aria-label=\"ballparks table\">\r\n          <TableHead>\r\n            <TableRow className={classes.head}>\r\n              <TableCell>Ballpark Name</TableCell>\r\n              <TableCell>City</TableCell>\r\n              <TableCell>State</TableCell>\r\n            </TableRow>\r\n          </TableHead>\r\n          <TableBody>\r\n            {ballparkStore.ballparks?.length > 0 ? ballparkStore.ballparks?.map((ballpark: IBallpark, index: number) =>\r\n            <TableRow key={`${ballpark.AKA}-${index}`}>\r\n              <TableCell>{ballpark.NAME}</TableCell>\r\n              <TableCell>{ballpark.CITY}</TableCell>\r\n              <TableCell>{ballpark.STATE}</TableCell>\r\n            </TableRow>) :\r\n            <TableRow>\r\n              <TableCell colSpan={3}>\r\n                <Typography variant=\"h6\">No data to display</Typography>\r\n              </TableCell>\r\n            </TableRow>}\r\n          </TableBody>\r\n        </Table>\r\n      </TableContainer>\r\n    </React.Fragment>\r\n  )\r\n}\r\n\r\nexport default observer(Ballparks)\r\n","import { observer } from 'mobx-react-lite'\r\nimport React from 'react'\r\n\r\nconst Franchises: React.FC = () => {\r\n  return (\r\n    <h4>F R A N C H I S E S</h4>\r\n  )\r\n}\r\n\r\nexport default observer(Franchises)\r\n","import { createStyles, Link, makeStyles, Paper, Typography } from '@material-ui/core'\r\nimport React from 'react'\r\n\r\nconst useStyles = makeStyles(() =>\r\n  createStyles({\r\n    sectionHeader: {\r\n      fontFamily: '\"Courier New\",Courier,monospace',\r\n      fontWeight: 'bold'\r\n    },\r\n    sectionBreak: {\r\n      marginBottom: '20px'\r\n    },\r\n    paper: {\r\n      padding: '20px',\r\n      margin: '20px 20px',\r\n      backgroundColor: '#e8e8e8'\r\n    },\r\n    container: {\r\n      width: '65%'\r\n    },\r\n    code: {\r\n      backgroundColor: '#e8e8e8',\r\n      borderRadius: '5px',\r\n      padding: '5px'\r\n    },\r\n    dateStamp: {\r\n      flex: 1\r\n    }\r\n  })\r\n)\r\n\r\nconst About: React.FC = () => {\r\n  const classes = useStyles()\r\n\r\n  return (\r\n    <div className={classes.container}>\r\n      <Typography align=\"right\" className={classes.dateStamp}>February 24, 2021</Typography>\r\n      <Typography variant=\"h5\" className={classes.sectionHeader}>What's all this then</Typography>\r\n      <Typography variant=\"body1\" className={classes.sectionBreak}>\r\n        For quite a while I've been wanting to build a web application that makes use of baseball data.\r\n        I had what seemed like a pretty simple goal for it: I wanted it to be something that I would use \r\n        to look up baseball data or statistics or the boxscore from a certain game. But I could never quite \r\n        get a fully functional application running. I would start out pretty well by scraping or \r\n        downloading/parsing/cleaning data from somewhere and then run out of steam when it came time to \r\n        figure out how to host the data, let alone come up with a way to show and interact with it. Now \r\n        don't get me wrong, I don't think that what I describe below is the fully-functional baseball \r\n        application of my dreams. But what I've put together is a good step in that direction. \r\n        I think it's a solid foundation and it's something that I hope to continue to work on.\r\n      </Typography>\r\n      <Typography variant=\"h5\" className={classes.sectionHeader}>Let's get started</Typography>\r\n      <Typography variant=\"body1\" className={classes.sectionBreak}>\r\n        The entire system&mdash;if you will&mdash;is currently made up of two different GitHub repositories:\r\n        <Paper elevation={3} className={classes.paper}>\r\n          <Link href='https://github.com/mbents/mbents.github.io'>\r\n            https://github.com/mbents/mbents.github.io\r\n          </Link>\r\n          <br />\r\n          <Link href='https://github.com/mbents/rs-data'>\r\n            https://github.com/mbents/rs-data\r\n          </Link>\r\n        </Paper>\r\n        The web application was created using Create React App \r\n        (<Link href='https://github.com/facebook/create-react-app'>\r\n          https://github.com/facebook/create-react-app\r\n        </Link>) and is hosted on GitHub using GitHub Pages. I found a lot of different tutorials for doing this. \r\n        Here are the ones that I found most useful:\r\n        <Paper elevation={3} className={classes.paper}>\r\n          <Link href='https://create-react-app.dev/docs/deployment/#github-pages'>\r\n            https://create-react-app.dev/docs/deployment/#github-pages\r\n          </Link>\r\n          <br/>\r\n          <Link href='https://dev.to/yuribenjamin/how-to-deploy-react-app-in-github-pages-2a1f'>\r\n            https://dev.to/yuribenjamin/how-to-deploy-react-app-in-github-pages-2a1f\r\n          </Link>\r\n        </Paper>\r\n        <span className={classes.code}>gh-pages</span> is a package that helps publish your website. \r\n        There's a handy deploy step that packages up your site's files and pushes them to a branch on GitHub. \r\n        My web application also uses <span className={classes.code}>mobx-state-tree</span> for state management \r\n        and <span className={classes.code}>Material-UI</span> to build the UI.\r\n      </Typography>\r\n      <Typography variant=\"body1\" className={classes.sectionBreak}>\r\n        The backend data is also hosted via GitHub Pages. Basically it's a static API that only serves data \r\n        to <span className={classes.code}>GET</span> requests, but that's really all I needed and it's easy to do. \r\n        I originally got the idea from this post:\r\n        <Paper elevation={3} className={classes.paper}>\r\n          <Link href='https://dev.to/matmooredev/can-you-host-a-read-only-api-on-github-pages-1jib'>\r\n            https://dev.to/matmooredev/can-you-host-a-read-only-api-on-github-pages-1jib\r\n          </Link>\r\n        </Paper>\r\n        The repository itself is a collection of historical baseball data that I downloaded from a website \r\n        called Retrosheet (<Link href='https://www.retrosheet.org/'>https://www.retrosheet.org/</Link>). \r\n        I parsed the event files using a couple utilities that I had created several years ago:\r\n        <Paper elevation={3} className={classes.paper}>\r\n          <Link href='https://github.com/mbents/retrosheet-download-dotnet'>\r\n            https://github.com/mbents/retrosheet-download-dotnet\r\n          </Link><br />\r\n          <Link href='https://github.com/mbents/csv-to-json'>\r\n            https://github.com/mbents/csv-to-json\r\n          </Link>\r\n        </Paper>\r\n        They both still worked, which was pretty cool! The first project was written in C# and uses an executable \r\n        found on the Retrosheet website called <span className={classes.code}>BGAME</span> to parse the files \r\n        into CSV files. The second utility is a Node.js application that converts the CSV files to JSON. After everything\r\n        was parsed and I pushed the changes, I had a basic API up and running.\r\n      </Typography>\r\n      <Typography variant=\"h5\" className={classes.sectionHeader}>Gotcha!</Typography>\r\n      <Typography variant=\"body1\" className={classes.sectionBreak}>\r\n        A nice thing, in my opinion, about doing it this way is I can access the data just using the URL to the directory. \r\n        For example, this will return JSON data:\r\n        <Paper elevation={3} className={classes.paper}>\r\n          <Link href='https://mbents.github.io/rs-data/ballparks/'>\r\n            https://mbents.github.io/rs-data/ballparks/\r\n          </Link>\r\n        </Paper>\r\n        I don't need to specify <span className={classes.code}>index.json</span> in the \r\n        URL&mdash;which is the file located in the <span className={classes.code}>/ballparks</span> directory&mdash;but \r\n        it's important that it's there. \r\n        Because I'm fetching the directory and the directory contains a file named <span className={classes.code}>index.json</span>, the data returned will be the \r\n        contents of that file. This is a nice (possibly undocumented?) feature of GitHub, apparently.\r\n      </Typography>\r\n      <Typography variant=\"body1\" className={classes.sectionBreak}>\r\n        There are a couple things to take note of from this guide:\r\n        <Paper elevation={3} className={classes.paper}>\r\n          <Link href='https://create-react-app.dev/docs/deployment/#github-pages'>\r\n            https://create-react-app.dev/docs/deployment/#github-pages\r\n          </Link>\r\n        </Paper>\r\n        If you want to point a domain to your GitHub Pages project, you'll have to add a <span className={classes.code}>CNAME</span> file \r\n        to your repository, as noted in Step 5.<br />\r\n        Also, if your React application uses client-side routing, you might need to make some changes. My app \r\n        uses <span className={classes.code}>React Router</span> and I switched from the \r\n        common <span className={classes.code}>Router</span> to use <span className={classes.code}>HashRouter</span>.<br />\r\n        One more thing: I strongly recommend NOT tweaking the <span className={classes.code}>package.json</span> scripts \r\n        to push deployments to your main branch. In hindsight, it seems pretty obvious. However, at the time, I \r\n        didn't consider that all my React code was going to be overwritten by \r\n        the <span className={classes.code}>gh-pages</span> deployment process. \r\n      </Typography>\r\n      <Typography variant=\"h5\" className={classes.sectionHeader}>Conclusion</Typography>\r\n      <Typography variant=\"body1\" className={classes.sectionBreak}>\r\n        I certainly didn't intend for this to be a step-by-step guide for creating a React application \r\n        using a GitHub Pages repository as an API, but here we are. I mainly put this together because \r\n        I know that, given the way I start and stop my personal projects, at some point I will need \r\n        to reference this material again. If you're here and you aren't me, then I hope that this was \r\n        useful to you!\r\n      </Typography>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default About\r\n","import { applySnapshot, flow, types } from \"mobx-state-tree\"\r\n\r\nconst Ballpark = types.model('Ballpark', {\r\n  PARKID: types.string,\r\n  NAME: types.string,\r\n  AKA: types.string,\r\n  CITY: types.string,\r\n  STATE: types.string,\r\n  START: types.string,\r\n  END: types.string,\r\n  LEAGUE: types.string,\r\n  NOTES: types.string\r\n})\r\n\r\nexport const BallparkStore = types.model('BallparkStore', {\r\n  ballparks: types.optional(types.maybeNull(types.array(Ballpark)), null)\r\n}).actions(self => {\r\n  const load = flow(function* loadData() {\r\n    const response = yield fetch('https://www.mikebents.com/rs-data/ballparks/')\r\n    const json = yield response.json()\r\n    applySnapshot(self, {ballparks: [...json]})\r\n  })\r\n  \r\n  return {\r\n    load,\r\n    afterCreate() {\r\n      load()\r\n    }\r\n  }\r\n})\r\n","import React, { useEffect, useState } from 'react'\r\nimport { BallparkStore } from '../models/Ballpark'\r\nimport { BallparkContext } from '../contexts/BallparkContext'\r\n\r\nconst BallparkProvider = ({ children }: any) => {\r\n  const [ballparkStore] = useState(BallparkStore.create({ballparks: []}))\r\n\r\n  // useEffect(() => {\r\n  //   console.log(\"hello\")\r\n  //   // window.store = ballparkStore\r\n  // }, [ballparkStore])\r\n\r\n  const { Provider } = BallparkContext\r\n  return (\r\n    <Provider value={ballparkStore}>\r\n      {children}\r\n    </Provider>\r\n  )\r\n}\r\n\r\nexport default BallparkProvider\r\n","import { AppBar, Badge, Container, CssBaseline, Divider, Drawer, IconButton, List, ListItem, ListItemText, makeStyles, Toolbar, Typography, useTheme } from '@material-ui/core'\r\nimport { Switch, Route, Link, HashRouter } from 'react-router-dom'\r\nimport React, { useState } from 'react'\r\nimport './App.css'\r\nimport clsx from 'clsx'\r\nimport MenuIcon from '@material-ui/icons/Menu'\r\nimport ChevronLeftIcon from '@material-ui/icons/ChevronLeft'\r\nimport ChevronRightIcon from '@material-ui/icons/ChevronRight'\r\nimport ListItemIcon from '@material-ui/core/ListItemIcon'\r\nimport HomeIcon from '@material-ui/icons/Home'\r\nimport EventSeatIcon from '@material-ui/icons/EventSeat'\r\nimport GroupIcon from '@material-ui/icons/Group'\r\nimport PersonIcon from '@material-ui/icons/Person'\r\nimport GitHubIcon from '@material-ui/icons/GitHub'\r\nimport TwitterIcon from '@material-ui/icons/Twitter'\r\nimport Home from './components/Home'\r\nimport Ballparks from './components/Ballparks'\r\nimport Franchises from './components/Franchises'\r\nimport About from './components/About'\r\nimport BallparkProvider from './providers/BallparkProvider'\r\n\r\nconst drawerWidth = 240\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    display: 'flex',\r\n  },\r\n  appBar: {\r\n    zIndex: theme.zIndex.drawer + 1,\r\n    transition: theme.transitions.create(['width', 'margin'], {\r\n      easing: theme.transitions.easing.sharp,\r\n      duration: theme.transitions.duration.leavingScreen,\r\n    }),\r\n  },\r\n  appBarShift: {\r\n    marginLeft: drawerWidth,\r\n    width: `calc(100% - ${drawerWidth}px)`,\r\n    transition: theme.transitions.create(['width', 'margin'], {\r\n      easing: theme.transitions.easing.sharp,\r\n      duration: theme.transitions.duration.enteringScreen,\r\n    }),\r\n  },\r\n  menuButton: {\r\n    marginRight: 36,\r\n  },\r\n  hide: {\r\n    display: 'none',\r\n  },\r\n  drawer: {\r\n    width: drawerWidth,\r\n    flexShrink: 0,\r\n    whiteSpace: 'nowrap',\r\n  },\r\n  drawerOpen: {\r\n    width: drawerWidth,\r\n    transition: theme.transitions.create('width', {\r\n      easing: theme.transitions.easing.sharp,\r\n      duration: theme.transitions.duration.enteringScreen,\r\n    }),\r\n  },\r\n  drawerClose: {\r\n    transition: theme.transitions.create('width', {\r\n      easing: theme.transitions.easing.sharp,\r\n      duration: theme.transitions.duration.leavingScreen,\r\n    }),\r\n    overflowX: 'hidden',\r\n    width: theme.spacing(7) + 1,\r\n    [theme.breakpoints.up('sm')]: {\r\n      width: theme.spacing(9) + 1,\r\n    },\r\n  },\r\n  toolbar: {\r\n    display: 'flex',\r\n    alignItems: 'center',\r\n    justifyContent: 'flex-end',\r\n    padding: theme.spacing(0, 1),\r\n    ...theme.mixins.toolbar,\r\n  },\r\n  content: {\r\n    flexGrow: 1,\r\n    padding: theme.spacing(3),\r\n  },\r\n  badgeSection: {\r\n    float: 'right',\r\n    display: 'none',\r\n    [theme.breakpoints.up('md')]: {\r\n      display: 'flex',\r\n    },\r\n  },\r\n  grow: {\r\n    flexGrow: 1,\r\n  },\r\n  toolbarHeader: {\r\n    fontFamily: '\"Courier New\",Courier,monospace'\r\n  }\r\n}))\r\n\r\nfunction App() {\r\n  const classes = useStyles()\r\n  const theme = useTheme()\r\n  const [open, setOpen] = useState(false)\r\n\r\n  const handleDrawerOpen = () => {\r\n    setOpen(true)\r\n  }\r\n\r\n  const handleDrawerClose = () => {\r\n    setOpen(false)\r\n  }\r\n\r\n  return (\r\n    <div className={classes.root}>\r\n      <HashRouter basename=\"/\">\r\n        <CssBaseline />\r\n        <AppBar\r\n          color=\"default\"\r\n          position=\"fixed\"\r\n          className={clsx(classes.appBar, {\r\n            [classes.appBarShift]: open,\r\n          })}\r\n        >\r\n          <Toolbar>\r\n            <IconButton\r\n              color=\"inherit\"\r\n              aria-label=\"open drawer\"\r\n              onClick={handleDrawerOpen}\r\n              edge=\"start\"\r\n              className={clsx(classes.menuButton, {\r\n                [classes.hide]: open,\r\n              })}\r\n            >\r\n              <MenuIcon />\r\n            </IconButton>\r\n            <Typography variant=\"h4\" className={classes.toolbarHeader} noWrap>\r\n              mikebents.com\r\n            </Typography>\r\n            <div className={classes.grow} />\r\n            <div className={classes.badgeSection}>\r\n              <IconButton title=\"GitHub repos\" color=\"inherit\" href=\"https://github.com/mbents\">\r\n                <Badge color=\"secondary\">\r\n                  <GitHubIcon />\r\n                </Badge>\r\n              </IconButton>\r\n              <IconButton title=\"Twitter\" color=\"inherit\" href=\"https://twitter.com/MikeBents\">\r\n                <Badge color=\"secondary\">\r\n                  <TwitterIcon />\r\n                </Badge>\r\n              </IconButton>\r\n            </div>\r\n          </Toolbar>\r\n        </AppBar>\r\n        <Drawer\r\n          variant=\"permanent\"\r\n          className={clsx(classes.drawer, {\r\n            [classes.drawerOpen]: open,\r\n            [classes.drawerClose]: !open,\r\n          })}\r\n          classes={{\r\n            paper: clsx({\r\n              [classes.drawerOpen]: open,\r\n              [classes.drawerClose]: !open,\r\n            }),\r\n          }}\r\n        >\r\n          <div className={classes.toolbar}>\r\n            <IconButton onClick={handleDrawerClose}>\r\n              {theme.direction === 'rtl' ? <ChevronRightIcon /> : <ChevronLeftIcon />}\r\n            </IconButton>\r\n          </div>\r\n          <Divider />\r\n          <List>\r\n            <ListItem button key=\"home\" component={Link} to=\"/\">\r\n              <ListItemIcon><HomeIcon /></ListItemIcon>\r\n              <ListItemText primary=\"Home\" />\r\n            </ListItem>\r\n            <ListItem button key=\"about\" component={Link} to=\"/about\">\r\n              <ListItemIcon><PersonIcon /></ListItemIcon>\r\n              <ListItemText primary=\"About\" />\r\n            </ListItem>\r\n            <ListItem button key=\"ballparks\" component={Link} to=\"/ballparks\">\r\n              <ListItemIcon><EventSeatIcon /></ListItemIcon>\r\n              <ListItemText primary=\"Ballparks\" />\r\n            </ListItem>\r\n            <ListItem button key=\"franchises\" component={Link} to=\"/franchises\">\r\n              <ListItemIcon><GroupIcon /></ListItemIcon>\r\n              <ListItemText primary=\"Franchises\" />\r\n            </ListItem>\r\n          </List>\r\n        </Drawer>\r\n        <main className={classes.content}>\r\n          <div className={classes.toolbar} />\r\n          <Container maxWidth=\"lg\">\r\n            <Switch>\r\n              <Route path=\"/franchises\" component={Franchises} />\r\n              <Route path=\"/ballparks\">\r\n                <BallparkProvider>\r\n                  <Ballparks />\r\n                </BallparkProvider>\r\n              </Route>\r\n              <Route path=\"/about\" component={About} />\r\n              <Route path=\"/\" component={Home} />\r\n            </Switch>\r\n          </Container>\r\n        </main>\r\n      </HashRouter>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default App\r\n","import { ReportHandler } from 'web-vitals';\r\n\r\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}