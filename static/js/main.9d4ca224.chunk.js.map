{"version":3,"sources":["components/Home.tsx","contexts/BallparkContext.tsx","components/Ballparks.tsx","contexts/FranchiseContext.tsx","components/Franchises.tsx","components/About.tsx","models/Ballpark.ts","providers/BallparkProvider.tsx","models/Franchise.ts","providers/FranchiseProvider.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["useStyles","makeStyles","createStyles","paper","padding","minHeight","backgroundColor","Home","classes","useState","disclaimerOpen","setDisclaimerOpen","handleClose","Fragment","Grid","container","spacing","item","xs","Paper","elevation","className","Link","variant","color","href","Typography","Snackbar","anchorOrigin","vertical","horizontal","open","autoHideDuration","onClose","message","action","IconButton","size","aria-label","onClick","fontSize","BallparkContext","createContext","observer","ballparks","mapState","store","useContext","useBallparkStore","length","title","columns","name","label","options","filter","sort","data","rowsPerPage","rowsPerPageOptions","print","selectableRows","FranchiseContext","franchises","useFranchiseStore","pagination","sectionHeader","fontFamily","fontWeight","sectionBreak","marginBottom","margin","width","code","borderRadius","dateStamp","flex","About","align","Ballpark","types","model","PARKID","string","NAME","AKA","CITY","STATE","START","END","LEAGUE","NOTES","BallparkStore","optional","maybeNull","array","actions","self","load","flow","loadData","fetch","response","json","applySnapshot","afterCreate","BallparkProvider","children","create","ballparkStore","Provider","value","Franchise","Current_Franchise_ID","Franchise_ID","League","Division","Location_Name","Nickname","Alternate_Nicknames","First_Date_Nickname_Used","Last_Date_Nickname_Used","City","State","FranchiseStore","FranchiseProvider","franchiseStore","drawerWidth","theme","root","display","appBar","zIndex","drawer","transition","transitions","easing","sharp","duration","leavingScreen","appBarShift","marginLeft","enteringScreen","menuButton","marginRight","hide","flexShrink","whiteSpace","drawerOpen","drawerClose","overflowX","breakpoints","up","toolbar","alignItems","justifyContent","mixins","content","flexGrow","badgeSection","float","grow","toolbarHeader","App","useTheme","setOpen","basename","CssBaseline","AppBar","position","clsx","Toolbar","edge","noWrap","Badge","Drawer","direction","Divider","List","ListItem","button","component","to","ListItemIcon","ListItemText","primary","Container","maxWidth","path","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.9d4ca224.chunk.js","sourcesContent":["import { createStyles, Grid, IconButton, Link, makeStyles, Paper, Snackbar, Typography } from '@material-ui/core'\r\nimport React, { useState } from 'react'\r\nimport CloseIcon from '@material-ui/icons/Close'\r\n\r\nconst useStyles = makeStyles(() =>\r\n  createStyles({\r\n    paper: {\r\n      padding: '10px',\r\n      minHeight: '50vh',\r\n      backgroundColor: '#99ccff'\r\n    }\r\n  })\r\n)\r\n\r\nconst Home: React.FC = () => {\r\n  const classes = useStyles()\r\n  const [disclaimerOpen, setDisclaimerOpen] = useState(true)\r\n\r\n  const handleClose = () => {\r\n    setDisclaimerOpen(false)\r\n  }\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <Grid container spacing={3}>\r\n        <Grid item xs={4}>\r\n          <Paper elevation={3} className={classes.paper}>\r\n            <Link variant=\"h6\" color=\"inherit\" href=\"/#/about\">ABOUT</Link>\r\n            <Typography variant=\"body1\">\r\n              What is going on with this website?\r\n            </Typography>\r\n          </Paper>\r\n        </Grid>\r\n        <Grid item xs={4}>\r\n          <Paper elevation={3} className={classes.paper}>\r\n            <Link variant=\"h6\" color=\"inherit\" href=\"/#/ballparks\">BALLPARKS</Link>\r\n            <Typography variant=\"body1\">\r\n              Check out some ballparks!\r\n            </Typography>\r\n          </Paper>\r\n        </Grid>\r\n        <Grid item xs={4}>\r\n          <Paper elevation={3} className={classes.paper}>\r\n            <Link variant=\"h6\" color=\"inherit\" href=\"/#/franchises\">FRANCHISES</Link>\r\n            <Typography variant=\"body1\">\r\n              Look up current and historical baseball franchises.\r\n            </Typography>\r\n          </Paper>\r\n        </Grid>\r\n      </Grid>\r\n     <Snackbar\r\n      anchorOrigin={{\r\n        vertical: 'bottom',\r\n        horizontal: 'left',\r\n      }}\r\n      open={disclaimerOpen}\r\n      autoHideDuration={10000}\r\n      onClose={handleClose}\r\n      message='The information used here was obtained free of\r\n        charge from and is copyrighted by Retrosheet.  Interested\r\n        parties may contact Retrosheet at \r\n        \"www.retrosheet.org\"'\r\n      action={\r\n        <IconButton size=\"small\" aria-label=\"close\" color=\"inherit\" onClick={handleClose}>\r\n          <CloseIcon fontSize=\"small\" />\r\n        </IconButton>\r\n      }\r\n     />\r\n    </React.Fragment>\r\n  )\r\n}\r\n\r\nexport default Home\r\n","import { createContext, useContext } from \"react\"\r\nimport { IBallparkStore } from '../stores/IBallpark'\r\n\r\nexport const BallparkContext = createContext<any>(null)\r\n\r\ninterface IMapState {\r\n  (store: IBallparkStore): any\r\n}\r\n\r\nexport function useBallparkStore(mapState?: IMapState): any {\r\n  const store = useContext(BallparkContext)\r\n\r\n  if (mapState) {\r\n    return mapState(store)\r\n  }\r\n\r\n  return store\r\n}\r\n","import { observer } from 'mobx-react-lite'\r\nimport React from 'react'\r\nimport { useBallparkStore } from '../contexts/BallparkContext'\r\nimport MUIDataTable from 'mui-datatables'\r\n\r\nconst Ballparks: React.FC = () => {\r\n  const ballparkStore = useBallparkStore()\r\n  const { ballparks } = ballparkStore\r\n\r\n  const options = {\r\n    rowsPerPage: 25,\r\n    rowsPerPageOptions: [25,50,100,200,300],\r\n    print: false,\r\n    selectableRows: \"none\" as const\r\n  }\r\n\r\n  const columns = [\r\n    {\r\n      name: \"PARKID\",\r\n      label: \"Park ID\",\r\n      options: {\r\n        filter: false,\r\n        sort: true,\r\n      }\r\n    },\r\n    {\r\n      name: \"NAME\",\r\n      label: \"Name\",\r\n      options: {\r\n        filter: false,\r\n        sort: true,\r\n      }\r\n    },\r\n    {\r\n      name: \"AKA\",\r\n      label: \"Other Names\",\r\n      options: {\r\n        filter: false,\r\n        sort: true,\r\n      }\r\n    },\r\n    {\r\n      name: \"CITY\",\r\n      label: \"City\",\r\n      options: {\r\n        filter: true,\r\n        sort: true,\r\n      }\r\n    },\r\n    {\r\n      name: \"STATE\",\r\n      label: \"State\",\r\n      options: {\r\n        filter: true,\r\n        sort: true,\r\n      }\r\n    },\r\n    {\r\n      name: \"START\",\r\n      label: \"Start\",\r\n      options: {\r\n        filter: false,\r\n        sort: true,\r\n      }\r\n    },\r\n    {\r\n      name: \"END\",\r\n      label: \"End\",\r\n      options: {\r\n        filter: false,\r\n        sort: true,\r\n      }\r\n    },\r\n    {\r\n      name: \"LEAGUE\",\r\n      label: \"League\",\r\n      options: {\r\n        filter: true,\r\n        sort: true,\r\n      }\r\n    },\r\n    {\r\n      name: \"NOTES\",\r\n      label: \"Notes\",\r\n      options: {\r\n        filter: false,\r\n        sort: true,\r\n      }\r\n    }\r\n  ]\r\n\r\n  return (\r\n    <React.Fragment>\r\n      {ballparks?.length > 0 &&\r\n      <MUIDataTable\r\n        title={\"Ballparks\"}\r\n        columns={columns}\r\n        data={ballparks}\r\n        options={options}\r\n      />}\r\n    </React.Fragment>\r\n  )\r\n}\r\n\r\nexport default observer(Ballparks)\r\n","import { createContext, useContext } from \"react\"\r\nimport { IFranchiseStore } from '../stores/IFranchise'\r\n\r\nexport const FranchiseContext = createContext<any>(null)\r\n\r\ninterface IMapState {\r\n  (store: IFranchiseStore): any\r\n}\r\n\r\nexport function useFranchiseStore(mapState?: IMapState): any {\r\n  const store = useContext(FranchiseContext)\r\n\r\n  if (mapState) {\r\n    return mapState(store)\r\n  }\r\n\r\n  return store\r\n}\r\n","import { observer } from 'mobx-react-lite'\r\nimport MUIDataTable from 'mui-datatables'\r\nimport React from 'react'\r\nimport { useFranchiseStore } from '../contexts/FranchiseContext'\r\n\r\nconst Franchises: React.FC = () => {\r\n  const franchiseStore = useFranchiseStore()\r\n  const { franchises } = franchiseStore\r\n\r\n  const options = {\r\n    pagination: false,\r\n    print: false,\r\n    selectableRows: \"none\" as const\r\n  }\r\n\r\n  const columns=[\r\n    {\r\n      name: \"Current_Franchise_ID\",\r\n      label: 'Current Franchise ID',\r\n      options: {\r\n        filter: true,\r\n        sort: true,\r\n      }\r\n    },\r\n    {\r\n      name: \"Franchise_ID\",\r\n      label: 'Franchise ID',\r\n      options: {\r\n        filter: true,\r\n        sort: true,\r\n      }\r\n    },\r\n    {\r\n      name: \"League\",\r\n      label: \"League\",\r\n      options: {\r\n        filter: true,\r\n        sort: true,\r\n      }\r\n    },\r\n    {\r\n      name: \"Division\",\r\n      label: 'Division',\r\n      options: {\r\n        filter: true,\r\n        sort: true,\r\n      }\r\n    },\r\n    {\r\n      name: \"Location_Name\",\r\n      label: 'Location Name',\r\n      options: {\r\n        filter: true,\r\n        sort: true,\r\n      }\r\n    },\r\n    {\r\n      name: \"Nickname\",\r\n      label: 'Nickname',\r\n      options: {\r\n        filter: true,\r\n        sort: true,\r\n      }\r\n    },\r\n    {\r\n      name: \"Alternate_Nicknames\",\r\n      label: \"Alternate Nicknames\",\r\n      options: {\r\n        filter: true,\r\n        sort: true,\r\n      }\r\n    },\r\n    {\r\n      name: \"First_Date_Nickname_Used\",\r\n      label: 'Used From',\r\n      options: {\r\n        filter: false,\r\n        sort: true,\r\n      }\r\n    },\r\n    {\r\n      name: \"Last_Date_Nickname_Used\",\r\n      label: 'Used Until',\r\n      options: {\r\n        filter: false,\r\n        sort: true,\r\n      }\r\n    },\r\n    {\r\n      name: \"City\",\r\n      label: 'City',\r\n      options: {\r\n        filter: true,\r\n        sort: true,\r\n      }\r\n    },\r\n    {\r\n      name: \"State\",\r\n      label: \"State\",\r\n      options: {\r\n        filter: true,\r\n        sort: true,\r\n      }\r\n    },\r\n  ]\r\n\r\n\r\n  return (\r\n    <React.Fragment>\r\n      {franchises?.length > 0 &&\r\n      <MUIDataTable\r\n        title={\"Franchises\"}\r\n        columns={columns}\r\n        data={franchises}\r\n        options={options}\r\n      />}\r\n    </React.Fragment>\r\n  )\r\n}\r\n\r\nexport default observer(Franchises)\r\n","import { createStyles, Link, makeStyles, Paper, Typography } from '@material-ui/core'\r\nimport React from 'react'\r\n\r\nconst useStyles = makeStyles(() =>\r\n  createStyles({\r\n    sectionHeader: {\r\n      fontFamily: '\"Courier New\",Courier,monospace',\r\n      fontWeight: 'bold'\r\n    },\r\n    sectionBreak: {\r\n      marginBottom: '20px'\r\n    },\r\n    paper: {\r\n      padding: '20px',\r\n      margin: '20px 20px',\r\n      backgroundColor: '#e8e8e8'\r\n    },\r\n    container: {\r\n      width: '65%'\r\n    },\r\n    code: {\r\n      backgroundColor: '#e8e8e8',\r\n      borderRadius: '5px',\r\n      padding: '5px'\r\n    },\r\n    dateStamp: {\r\n      flex: 1\r\n    }\r\n  })\r\n)\r\n\r\nconst About: React.FC = () => {\r\n  const classes = useStyles()\r\n\r\n  return (\r\n    <div className={classes.container}>\r\n      <Typography align=\"right\" className={classes.dateStamp}>February 24, 2021</Typography>\r\n      <Typography variant=\"h5\" className={classes.sectionHeader}>What's all this then</Typography>\r\n      <Typography variant=\"body1\" className={classes.sectionBreak}>\r\n        For quite a while I've been wanting to build a web application that makes use of baseball data.\r\n        I had what seemed like a pretty simple goal for it: I wanted it to be something that I would use \r\n        to look up baseball data or statistics or the boxscore from a certain game. But I could never quite \r\n        get a fully functional application running. I would start out pretty well by scraping or \r\n        downloading/parsing/cleaning data from somewhere and then run out of steam when it came time to \r\n        figure out how to host the data, let alone come up with a way to show and interact with it. Now \r\n        don't get me wrong, I don't think that what I describe below is the fully-functional baseball \r\n        application of my dreams. But what I've put together is a good step in that direction. \r\n        I think it's a solid foundation and it's something that I hope to continue to work on.\r\n      </Typography>\r\n      <Typography variant=\"h5\" className={classes.sectionHeader}>Let's get started</Typography>\r\n      <Typography variant=\"body1\" className={classes.sectionBreak}>\r\n        The entire system&mdash;if you will&mdash;is currently made up of two different GitHub repositories:\r\n        <Paper elevation={3} className={classes.paper}>\r\n          <Link href='https://github.com/mbents/mbents.github.io'>\r\n            https://github.com/mbents/mbents.github.io\r\n          </Link>\r\n          <br />\r\n          <Link href='https://github.com/mbents/rs-data'>\r\n            https://github.com/mbents/rs-data\r\n          </Link>\r\n        </Paper>\r\n        The web application was created using Create React App \r\n        (<Link href='https://github.com/facebook/create-react-app'>\r\n          https://github.com/facebook/create-react-app\r\n        </Link>) and is hosted on GitHub using GitHub Pages. I found a lot of different tutorials for doing this. \r\n        Here are the ones that I found most useful:\r\n        <Paper elevation={3} className={classes.paper}>\r\n          <Link href='https://create-react-app.dev/docs/deployment/#github-pages'>\r\n            https://create-react-app.dev/docs/deployment/#github-pages\r\n          </Link>\r\n          <br/>\r\n          <Link href='https://dev.to/yuribenjamin/how-to-deploy-react-app-in-github-pages-2a1f'>\r\n            https://dev.to/yuribenjamin/how-to-deploy-react-app-in-github-pages-2a1f\r\n          </Link>\r\n        </Paper>\r\n        <span className={classes.code}>gh-pages</span> is a package that helps publish your website. \r\n        There's a handy deploy step that packages up your site's files and pushes them to a branch on GitHub. \r\n        My web application also uses <span className={classes.code}>mobx-state-tree</span> for state management \r\n        and <span className={classes.code}>Material-UI</span> to build the UI.\r\n      </Typography>\r\n      <Typography variant=\"body1\" className={classes.sectionBreak}>\r\n        The backend data is also hosted via GitHub Pages. Basically it's a static API that only serves data \r\n        to <span className={classes.code}>GET</span> requests, but that's really all I needed and it's easy to do. \r\n        I originally got the idea from this post:\r\n        <Paper elevation={3} className={classes.paper}>\r\n          <Link href='https://dev.to/matmooredev/can-you-host-a-read-only-api-on-github-pages-1jib'>\r\n            https://dev.to/matmooredev/can-you-host-a-read-only-api-on-github-pages-1jib\r\n          </Link>\r\n        </Paper>\r\n        The repository itself is a collection of historical baseball data that I downloaded from a website \r\n        called Retrosheet (<Link href='https://www.retrosheet.org/'>https://www.retrosheet.org/</Link>). \r\n        I parsed the event files using a couple utilities that I had created several years ago:\r\n        <Paper elevation={3} className={classes.paper}>\r\n          <Link href='https://github.com/mbents/retrosheet-download-dotnet'>\r\n            https://github.com/mbents/retrosheet-download-dotnet\r\n          </Link><br />\r\n          <Link href='https://github.com/mbents/csv-to-json'>\r\n            https://github.com/mbents/csv-to-json\r\n          </Link>\r\n        </Paper>\r\n        They both still worked, which was pretty cool! The first project was written in C# and uses an executable \r\n        found on the Retrosheet website called <span className={classes.code}>BGAME</span> to parse the files \r\n        into CSV files. The second utility is a Node.js application that converts the CSV files to JSON. After everything\r\n        was parsed and I pushed the changes, I had a basic API up and running.\r\n      </Typography>\r\n      <Typography variant=\"h5\" className={classes.sectionHeader}>Gotcha!</Typography>\r\n      <Typography variant=\"body1\" className={classes.sectionBreak}>\r\n        A nice thing, in my opinion, about doing it this way is I can access the data just using the URL to the directory. \r\n        For example, this will return JSON data:\r\n        <Paper elevation={3} className={classes.paper}>\r\n          <Link href='https://mbents.github.io/rs-data/ballparks/'>\r\n            https://mbents.github.io/rs-data/ballparks/\r\n          </Link>\r\n        </Paper>\r\n        I don't need to specify <span className={classes.code}>index.json</span> in the \r\n        URL&mdash;which is the file located in the <span className={classes.code}>/ballparks</span> directory&mdash;but \r\n        it's important that it's there. \r\n        Because I'm fetching the directory and the directory contains a file named <span className={classes.code}>index.json</span>, the data returned will be the \r\n        contents of that file. This is a nice (possibly undocumented?) feature of GitHub, apparently.\r\n      </Typography>\r\n      <Typography variant=\"body1\" className={classes.sectionBreak}>\r\n        There are a couple things to take note of from this guide:\r\n        <Paper elevation={3} className={classes.paper}>\r\n          <Link href='https://create-react-app.dev/docs/deployment/#github-pages'>\r\n            https://create-react-app.dev/docs/deployment/#github-pages\r\n          </Link>\r\n        </Paper>\r\n        If you want to point a domain to your GitHub Pages project, you'll have to add a <span className={classes.code}>CNAME</span> file \r\n        to your repository, as noted in Step 5.<br />\r\n        Also, if your React application uses client-side routing, you might need to make some changes. My app \r\n        uses <span className={classes.code}>React Router</span> and I switched from the \r\n        common <span className={classes.code}>Router</span> to use <span className={classes.code}>HashRouter</span>.<br />\r\n        One more thing: I strongly recommend NOT tweaking the <span className={classes.code}>package.json</span> scripts \r\n        to push deployments to your main branch. In hindsight, it seems pretty obvious. However, at the time, I \r\n        didn't consider that all my React code was going to be overwritten by \r\n        the <span className={classes.code}>gh-pages</span> deployment process. \r\n      </Typography>\r\n      <Typography variant=\"h5\" className={classes.sectionHeader}>Conclusion</Typography>\r\n      <Typography variant=\"body1\" className={classes.sectionBreak}>\r\n        I certainly didn't intend for this to be a step-by-step guide for creating a React application \r\n        using a GitHub Pages repository as an API, but here we are. I mainly put this together because \r\n        I know that, given the way I start and stop my personal projects, at some point I will need \r\n        to reference this material again. If you're here and you aren't me, then I hope that this was \r\n        useful to you!\r\n      </Typography>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default About\r\n","import { applySnapshot, flow, types } from \"mobx-state-tree\"\r\n\r\nconst Ballpark = types.model('Ballpark', {\r\n  PARKID: types.string,\r\n  NAME: types.string,\r\n  AKA: types.string,\r\n  CITY: types.string,\r\n  STATE: types.string,\r\n  START: types.string,\r\n  END: types.string,\r\n  LEAGUE: types.string,\r\n  NOTES: types.string\r\n})\r\n\r\nexport const BallparkStore = types.model('BallparkStore', {\r\n  ballparks: types.optional(types.maybeNull(types.array(Ballpark)), null)\r\n}).actions(self => {\r\n  const load = flow(function* loadData() {\r\n    const response = yield fetch('https://www.mikebents.com/rs-data/ballparks/')\r\n    const json = yield response.json()\r\n    applySnapshot(self, {ballparks: [...json]})\r\n  })\r\n  \r\n  return {\r\n    load,\r\n    afterCreate() {\r\n      load()\r\n    }\r\n  }\r\n})\r\n","import React, { useEffect, useState } from 'react'\r\nimport { BallparkStore } from '../models/Ballpark'\r\nimport { BallparkContext } from '../contexts/BallparkContext'\r\n\r\nconst BallparkProvider = ({ children }: any) => {\r\n  const [ballparkStore] = useState(BallparkStore.create({ballparks: []}))\r\n\r\n  // useEffect(() => {\r\n  //   console.log(\"hello\")\r\n  //   // window.store = ballparkStore\r\n  // }, [ballparkStore])\r\n\r\n  const { Provider } = BallparkContext\r\n  return (\r\n    <Provider value={ballparkStore}>\r\n      {children}\r\n    </Provider>\r\n  )\r\n}\r\n\r\nexport default BallparkProvider\r\n","import { applySnapshot, flow, types } from \"mobx-state-tree\"\r\n\r\nconst Franchise = types.model('Franchise', {\r\n  Current_Franchise_ID: types.string,\r\n  Franchise_ID: types.string,\r\n  League: types.string,\r\n  Division: types.string,\r\n  Location_Name: types.string,\r\n  Nickname: types.string,\r\n  Alternate_Nicknames: types.string,\r\n  First_Date_Nickname_Used: types.string,\r\n  Last_Date_Nickname_Used: types.string,\r\n  City: types.string,\r\n  State: types.string\r\n})\r\n\r\nexport const FranchiseStore = types.model('FranchiseStore', {\r\n  franchises: types.optional(types.maybeNull(types.array(Franchise)), null)\r\n}).actions(self => {\r\n  const load = flow(function* loadData() {\r\n    const response = yield fetch('https://www.mikebents.com/rs-data/franchises/')\r\n    const json = yield response.json()\r\n    applySnapshot(self, {franchises: [...json]})\r\n  })\r\n  \r\n  return {\r\n    load,\r\n    afterCreate() {\r\n      load()\r\n    }\r\n  }\r\n})\r\n","import React, { useState } from 'react'\r\nimport { FranchiseStore } from '../models/Franchise'\r\nimport { FranchiseContext } from '../contexts/FranchiseContext'\r\n\r\nconst FranchiseProvider = ({ children }: any) => {\r\n  const [franchiseStore] = useState(FranchiseStore.create({franchises: []}))\r\n\r\n  const { Provider } = FranchiseContext\r\n  return (\r\n    <Provider value={franchiseStore}>\r\n      {children}\r\n    </Provider>\r\n  )\r\n}\r\n\r\nexport default FranchiseProvider\r\n","import { AppBar, Badge, Container, CssBaseline, Divider, Drawer, IconButton, List, ListItem, ListItemText, makeStyles, Toolbar, Typography, useTheme } from '@material-ui/core'\r\nimport { Switch, Route, Link, HashRouter } from 'react-router-dom'\r\nimport React, { useState } from 'react'\r\nimport './App.css'\r\nimport clsx from 'clsx'\r\nimport MenuIcon from '@material-ui/icons/Menu'\r\nimport ChevronLeftIcon from '@material-ui/icons/ChevronLeft'\r\nimport ChevronRightIcon from '@material-ui/icons/ChevronRight'\r\nimport ListItemIcon from '@material-ui/core/ListItemIcon'\r\nimport HomeIcon from '@material-ui/icons/Home'\r\nimport EventSeatIcon from '@material-ui/icons/EventSeat'\r\nimport GroupIcon from '@material-ui/icons/Group'\r\nimport PersonIcon from '@material-ui/icons/Person'\r\nimport GitHubIcon from '@material-ui/icons/GitHub'\r\nimport TwitterIcon from '@material-ui/icons/Twitter'\r\nimport Home from './components/Home'\r\nimport Ballparks from './components/Ballparks'\r\nimport Franchises from './components/Franchises'\r\nimport About from './components/About'\r\nimport BallparkProvider from './providers/BallparkProvider'\r\nimport FranchiseProvider from './providers/FranchiseProvider'\r\n\r\nconst drawerWidth = 240\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    display: 'flex',\r\n  },\r\n  appBar: {\r\n    zIndex: theme.zIndex.drawer + 1,\r\n    transition: theme.transitions.create(['width', 'margin'], {\r\n      easing: theme.transitions.easing.sharp,\r\n      duration: theme.transitions.duration.leavingScreen,\r\n    }),\r\n  },\r\n  appBarShift: {\r\n    marginLeft: drawerWidth,\r\n    width: `calc(100% - ${drawerWidth}px)`,\r\n    transition: theme.transitions.create(['width', 'margin'], {\r\n      easing: theme.transitions.easing.sharp,\r\n      duration: theme.transitions.duration.enteringScreen,\r\n    }),\r\n  },\r\n  menuButton: {\r\n    marginRight: 36,\r\n  },\r\n  hide: {\r\n    display: 'none',\r\n  },\r\n  drawer: {\r\n    width: drawerWidth,\r\n    flexShrink: 0,\r\n    whiteSpace: 'nowrap',\r\n  },\r\n  drawerOpen: {\r\n    width: drawerWidth,\r\n    transition: theme.transitions.create('width', {\r\n      easing: theme.transitions.easing.sharp,\r\n      duration: theme.transitions.duration.enteringScreen,\r\n    }),\r\n  },\r\n  drawerClose: {\r\n    transition: theme.transitions.create('width', {\r\n      easing: theme.transitions.easing.sharp,\r\n      duration: theme.transitions.duration.leavingScreen,\r\n    }),\r\n    overflowX: 'hidden',\r\n    width: theme.spacing(7) + 1,\r\n    [theme.breakpoints.up('sm')]: {\r\n      width: theme.spacing(9) + 1,\r\n    },\r\n  },\r\n  toolbar: {\r\n    display: 'flex',\r\n    alignItems: 'center',\r\n    justifyContent: 'flex-end',\r\n    padding: theme.spacing(0, 1),\r\n    ...theme.mixins.toolbar,\r\n  },\r\n  content: {\r\n    flexGrow: 1,\r\n    padding: theme.spacing(3),\r\n  },\r\n  badgeSection: {\r\n    float: 'right',\r\n    display: 'none',\r\n    [theme.breakpoints.up('md')]: {\r\n      display: 'flex',\r\n    },\r\n  },\r\n  grow: {\r\n    flexGrow: 1,\r\n  },\r\n  toolbarHeader: {\r\n    fontFamily: '\"Courier New\",Courier,monospace'\r\n  }\r\n}))\r\n\r\nfunction App() {\r\n  const classes = useStyles()\r\n  const theme = useTheme()\r\n  const [open, setOpen] = useState(false)\r\n\r\n  const handleDrawerOpen = () => {\r\n    setOpen(true)\r\n  }\r\n\r\n  const handleDrawerClose = () => {\r\n    setOpen(false)\r\n  }\r\n\r\n  return (\r\n    <div className={classes.root}>\r\n      <HashRouter basename=\"/\">\r\n        <CssBaseline />\r\n        <AppBar\r\n          color=\"default\"\r\n          position=\"fixed\"\r\n          className={clsx(classes.appBar, {\r\n            [classes.appBarShift]: open,\r\n          })}\r\n        >\r\n          <Toolbar>\r\n            <IconButton\r\n              color=\"inherit\"\r\n              aria-label=\"open drawer\"\r\n              onClick={handleDrawerOpen}\r\n              edge=\"start\"\r\n              className={clsx(classes.menuButton, {\r\n                [classes.hide]: open,\r\n              })}\r\n            >\r\n              <MenuIcon />\r\n            </IconButton>\r\n            <Typography variant=\"h4\" className={classes.toolbarHeader} noWrap>\r\n              mikebents.com\r\n            </Typography>\r\n            <div className={classes.grow} />\r\n            <div className={classes.badgeSection}>\r\n              <IconButton title=\"GitHub repos\" color=\"inherit\" href=\"https://github.com/mbents\">\r\n                <Badge color=\"secondary\">\r\n                  <GitHubIcon />\r\n                </Badge>\r\n              </IconButton>\r\n              <IconButton title=\"Twitter\" color=\"inherit\" href=\"https://twitter.com/MikeBents\">\r\n                <Badge color=\"secondary\">\r\n                  <TwitterIcon />\r\n                </Badge>\r\n              </IconButton>\r\n            </div>\r\n          </Toolbar>\r\n        </AppBar>\r\n        <Drawer\r\n          variant=\"permanent\"\r\n          className={clsx(classes.drawer, {\r\n            [classes.drawerOpen]: open,\r\n            [classes.drawerClose]: !open,\r\n          })}\r\n          classes={{\r\n            paper: clsx({\r\n              [classes.drawerOpen]: open,\r\n              [classes.drawerClose]: !open,\r\n            }),\r\n          }}\r\n        >\r\n          <div className={classes.toolbar}>\r\n            <IconButton onClick={handleDrawerClose}>\r\n              {theme.direction === 'rtl' ? <ChevronRightIcon /> : <ChevronLeftIcon />}\r\n            </IconButton>\r\n          </div>\r\n          <Divider />\r\n          <List>\r\n            <ListItem button key=\"home\" component={Link} to=\"/\">\r\n              <ListItemIcon><HomeIcon /></ListItemIcon>\r\n              <ListItemText primary=\"Home\" />\r\n            </ListItem>\r\n            <ListItem button key=\"about\" component={Link} to=\"/about\">\r\n              <ListItemIcon><PersonIcon /></ListItemIcon>\r\n              <ListItemText primary=\"About\" />\r\n            </ListItem>\r\n            <ListItem button key=\"ballparks\" component={Link} to=\"/ballparks\">\r\n              <ListItemIcon><EventSeatIcon /></ListItemIcon>\r\n              <ListItemText primary=\"Ballparks\" />\r\n            </ListItem>\r\n            <ListItem button key=\"franchises\" component={Link} to=\"/franchises\">\r\n              <ListItemIcon><GroupIcon /></ListItemIcon>\r\n              <ListItemText primary=\"Franchises\" />\r\n            </ListItem>\r\n          </List>\r\n        </Drawer>\r\n        <main className={classes.content}>\r\n          <div className={classes.toolbar} />\r\n          <Container maxWidth=\"lg\">\r\n            <Switch>\r\n              <Route path=\"/franchises\">\r\n                <FranchiseProvider>\r\n                  <Franchises />\r\n                </FranchiseProvider>\r\n              </Route>\r\n              <Route path=\"/ballparks\">\r\n                <BallparkProvider>\r\n                  <Ballparks />\r\n                </BallparkProvider>\r\n              </Route>\r\n              <Route path=\"/about\" component={About} />\r\n              <Route path=\"/\" component={Home} />\r\n            </Switch>\r\n          </Container>\r\n        </main>\r\n      </HashRouter>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default App\r\n","import { ReportHandler } from 'web-vitals';\r\n\r\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}