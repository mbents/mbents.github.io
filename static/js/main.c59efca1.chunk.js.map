{"version":3,"sources":["components/Home.tsx","contexts/BallparkContext.tsx","components/GenericBreadcrumbs.tsx","components/Ballparks.tsx","contexts/FranchiseContext.tsx","components/FranchiseBreadcrumbs.tsx","components/Franchises.tsx","components/FranchiseCard.tsx","components/Franchise.tsx","components/About.tsx","contexts/ScheduleContext.tsx","components/Schedule.tsx","models/Schedule.ts","providers/ScheduleProvider.tsx","components/Schedules.tsx","models/Ballpark.ts","providers/BallparkProvider.tsx","models/Franchise.ts","providers/FranchiseProvider.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["useStyles","makeStyles","createStyles","paper","padding","minHeight","backgroundColor","Home","classes","useState","disclaimerOpen","setDisclaimerOpen","handleClose","Fragment","Grid","container","spacing","item","xs","Paper","elevation","className","Link","variant","color","href","Typography","Snackbar","anchorOrigin","vertical","horizontal","open","autoHideDuration","onClose","message","action","IconButton","size","aria-label","onClick","fontSize","BallparkContext","createContext","breadcrumbMargin","marginBottom","GenericBreadcrumbs","props","breadcrumb","Breadcrumbs","separator","observer","ballparks","mapState","store","useContext","useBallparkStore","length","title","columns","name","label","options","filter","sort","data","rowsPerPage","rowsPerPageOptions","print","selectableRows","FranchiseContext","useFranchiseStore","FranchiseBreadcrumbs","franchiseId","year","franchises","customBodyRender","value","pagination","franchise","expanded","setExpanded","yearsArray","setYearsArray","startYear","parseInt","First_Date_Nickname_Used","slice","Date","getFullYear","toString","endYear","Last_Date_Nickname_Used","useEffect","years","Array","from","v","k","Card","CardHeader","avatar","Avatar","Location_Name","substring","Nickname","subheader","CardContent","justify","City","State","Divider","orientation","League","Division","CardActions","Button","startIcon","Collapse","in","timeout","unmountOnExit","map","Franchise_ID","useParams","gutterBottom","index","sectionHeader","fontFamily","fontWeight","sectionBreak","margin","width","code","borderRadius","dateStamp","flex","About","align","ScheduleContext","scheduleStore","useScheduleStore","scheduledGames","date","showBreadcrumbs","parseDate","parsedDateStr","toDateString","parseTimeOfDay","timeOfDay","toUpperCase","game","visiting_team","home_team","time_of_day","game_number","ScheduledGame","types","model","string","day_of_week","visiting_team_league","visiting_team_game_number","home_team_league","home_team_game_number","postponement_explanation","makeup_date","ScheduleStore","optional","maybeNull","array","actions","self","load","flow","fetch","response","json","franchiseGames","applySnapshot","tempYear","tempDate","replaceAll","gamesByDate","afterCreate","ScheduleProvider","children","selectedFranchise","selectedYear","selectedDate","create","Provider","selectedFranchiseId","setSelectedFranchiseId","setSelectedYear","setSelectedDate","showDateSearch","setShowDateSearch","showFranchiseSearch","setShowFranchiseSearch","handleClick","source","getYear","FormControl","InputLabel","htmlFor","Select","id","autoWidth","native","onChange","event","target","Current_Franchise_ID","a","b","style","flexGrow","TextField","type","Ballpark","PARKID","NAME","AKA","CITY","STATE","START","END","LEAGUE","NOTES","BallparkStore","loadData","BallparkProvider","ballparkStore","Franchise","Alternate_Nicknames","FranchiseStore","FranchiseProvider","franchiseStore","drawerWidth","theme","root","display","appBar","zIndex","drawer","transition","transitions","easing","sharp","duration","leavingScreen","appBarShift","marginLeft","enteringScreen","menuButton","marginRight","hide","flexShrink","whiteSpace","drawerOpen","drawerClose","overflowX","breakpoints","up","toolbar","alignItems","justifyContent","mixins","content","badgeSection","float","grow","toolbarHeader","App","useTheme","setOpen","showBaseball","setShowBaseball","basename","CssBaseline","AppBar","position","clsx","Toolbar","edge","noWrap","Badge","Drawer","direction","List","ListItem","button","component","to","ListItemIcon","ListItemText","primary","Container","maxWidth","path","exact","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.c59efca1.chunk.js","sourcesContent":["import { createStyles, Grid, IconButton, Link, makeStyles, Paper, Snackbar, Typography } from '@material-ui/core'\r\nimport React, { useState } from 'react'\r\nimport CloseIcon from '@material-ui/icons/Close'\r\n\r\nconst useStyles = makeStyles(() =>\r\n  createStyles({\r\n    paper: {\r\n      padding: '10px',\r\n      minHeight: '50vh',\r\n      backgroundColor: '#99ccff'\r\n    }\r\n  })\r\n)\r\n\r\nconst Home: React.FC = () => {\r\n  const classes = useStyles()\r\n  const [disclaimerOpen, setDisclaimerOpen] = useState(true)\r\n\r\n  const handleClose = () => {\r\n    setDisclaimerOpen(false)\r\n  }\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <Grid container spacing={3}>\r\n        <Grid item xs={4}>\r\n          <Paper elevation={3} className={classes.paper}>\r\n            <Link variant=\"h6\" color=\"inherit\" href=\"/#/about\">ABOUT</Link>\r\n            <Typography variant=\"body1\">\r\n              What is going on with this website?\r\n            </Typography>\r\n          </Paper>\r\n        </Grid>\r\n        <Grid item xs={4}>\r\n          <Paper elevation={3} className={classes.paper}>\r\n            <Link variant=\"h6\" color=\"inherit\" href=\"/#/ballparks\">BALLPARKS</Link>\r\n            <Typography variant=\"body1\">\r\n              Check out some ballparks!\r\n            </Typography>\r\n          </Paper>\r\n        </Grid>\r\n        <Grid item xs={4}>\r\n          <Paper elevation={3} className={classes.paper}>\r\n            <Link variant=\"h6\" color=\"inherit\" href=\"/#/franchises\">FRANCHISES</Link>\r\n            <Typography variant=\"body1\">\r\n              Look up current and historical baseball franchises.\r\n            </Typography>\r\n          </Paper>\r\n        </Grid>\r\n        <Grid item xs={4}>\r\n          <Paper elevation={3} className={classes.paper}>\r\n            <Link variant=\"h6\" color=\"inherit\" href=\"/#/schedules\">SCHEDULES</Link>\r\n            <Typography variant=\"body1\">\r\n              Look up schedules by franchise or date.\r\n            </Typography>\r\n          </Paper>\r\n        </Grid>\r\n      </Grid>\r\n     <Snackbar\r\n      anchorOrigin={{\r\n        vertical: 'bottom',\r\n        horizontal: 'left',\r\n      }}\r\n      open={disclaimerOpen}\r\n      autoHideDuration={10000}\r\n      onClose={handleClose}\r\n      message='The information used here was obtained free of\r\n        charge from and is copyrighted by Retrosheet.  Interested\r\n        parties may contact Retrosheet at \r\n        \"www.retrosheet.org\"'\r\n      action={\r\n        <IconButton size=\"small\" aria-label=\"close\" color=\"inherit\" onClick={handleClose}>\r\n          <CloseIcon fontSize=\"small\" />\r\n        </IconButton>\r\n      }\r\n     />\r\n    </React.Fragment>\r\n  )\r\n}\r\n\r\nexport default Home\r\n","import { createContext, useContext } from \"react\"\r\nimport { IBallparkStore } from '../stores/IBallpark'\r\n\r\nexport const BallparkContext = createContext<any>(null)\r\n\r\ninterface IMapState {\r\n  (store: IBallparkStore): any\r\n}\r\n\r\nexport function useBallparkStore(mapState?: IMapState): any {\r\n  const store = useContext(BallparkContext)\r\n\r\n  if (mapState) {\r\n    return mapState(store)\r\n  }\r\n\r\n  return store\r\n}\r\n","import { Breadcrumbs, makeStyles, Typography } from '@material-ui/core'\r\nimport Link from '@material-ui/core/Link'\r\nimport NavigateNextIcon from '@material-ui/icons/NavigateNext'\r\n\r\nconst useStyles = makeStyles(() => ({\r\n  breadcrumbMargin: {\r\n    marginBottom: '10px'\r\n  }\r\n}))\r\n\r\ninterface IGenericBreadcrumbs {\r\n  breadcrumb: string\r\n}\r\n\r\nexport default function GenericBreadcrumbs(props: IGenericBreadcrumbs) {\r\n  const { breadcrumb } = props\r\n  const classes = useStyles()\r\n  return (\r\n    <Breadcrumbs className={classes.breadcrumbMargin} separator={<NavigateNextIcon fontSize=\"small\" />}>\r\n      <Link color=\"inherit\" href=\"/\">\r\n        Home\r\n      </Link>\r\n      <Typography color=\"textPrimary\">{breadcrumb}</Typography>\r\n    </Breadcrumbs>\r\n  )\r\n}\r\n","import { observer } from 'mobx-react-lite'\r\nimport React from 'react'\r\nimport { useBallparkStore } from '../contexts/BallparkContext'\r\nimport MUIDataTable from 'mui-datatables'\r\nimport GenericBreadcrumbs from './GenericBreadcrumbs'\r\n\r\nconst Ballparks: React.FC = () => {\r\n  const ballparkStore = useBallparkStore()\r\n  const { ballparks } = ballparkStore\r\n\r\n  const options = {\r\n    rowsPerPage: 25,\r\n    rowsPerPageOptions: [25,50,100,200,300],\r\n    print: false,\r\n    selectableRows: \"none\" as const\r\n  }\r\n\r\n  const columns = [\r\n    {\r\n      name: \"PARKID\",\r\n      label: \"Park ID\",\r\n      options: {\r\n        filter: false,\r\n        sort: true,\r\n      }\r\n    },\r\n    {\r\n      name: \"NAME\",\r\n      label: \"Name\",\r\n      options: {\r\n        filter: false,\r\n        sort: true,\r\n      }\r\n    },\r\n    {\r\n      name: \"AKA\",\r\n      label: \"Other Names\",\r\n      options: {\r\n        filter: false,\r\n        sort: true,\r\n      }\r\n    },\r\n    {\r\n      name: \"CITY\",\r\n      label: \"City\",\r\n      options: {\r\n        filter: true,\r\n        sort: true,\r\n      }\r\n    },\r\n    {\r\n      name: \"STATE\",\r\n      label: \"State\",\r\n      options: {\r\n        filter: true,\r\n        sort: true,\r\n      }\r\n    },\r\n    {\r\n      name: \"START\",\r\n      label: \"Start\",\r\n      options: {\r\n        filter: false,\r\n        sort: true,\r\n      }\r\n    },\r\n    {\r\n      name: \"END\",\r\n      label: \"End\",\r\n      options: {\r\n        filter: false,\r\n        sort: true,\r\n      }\r\n    },\r\n    {\r\n      name: \"LEAGUE\",\r\n      label: \"League\",\r\n      options: {\r\n        filter: true,\r\n        sort: true,\r\n      }\r\n    },\r\n    {\r\n      name: \"NOTES\",\r\n      label: \"Notes\",\r\n      options: {\r\n        filter: false,\r\n        sort: true,\r\n      }\r\n    }\r\n  ]\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <GenericBreadcrumbs breadcrumb=\"Ballparks\" />\r\n      {ballparks?.length > 0 &&\r\n      <MUIDataTable\r\n        title={\"Ballparks\"}\r\n        columns={columns}\r\n        data={ballparks}\r\n        options={options}\r\n      />}\r\n    </React.Fragment>\r\n  )\r\n}\r\n\r\nexport default observer(Ballparks)\r\n","import { createContext, useContext } from \"react\"\r\nimport { IFranchiseStore } from '../stores/IFranchise'\r\n\r\nexport const FranchiseContext = createContext<any>(null)\r\n\r\ninterface IMapState {\r\n  (store: IFranchiseStore): any\r\n}\r\n\r\nexport function useFranchiseStore(mapState?: IMapState): any {\r\n  const store = useContext(FranchiseContext)\r\n\r\n  if (mapState) {\r\n    return mapState(store)\r\n  }\r\n\r\n  return store\r\n}\r\n","import { Breadcrumbs, makeStyles, Typography } from '@material-ui/core'\r\nimport Link from '@material-ui/core/Link'\r\nimport NavigateNextIcon from '@material-ui/icons/NavigateNext'\r\n\r\nconst useStyles = makeStyles(() => ({\r\n  breadcrumbMargin: {\r\n    marginBottom: '10px'\r\n  }\r\n}))\r\n\r\ninterface IFranchiseBreadcrumbs {\r\n  franchiseId?: string,\r\n  year?: string\r\n}\r\n\r\nexport default function FranchiseBreadcrumbs(props: IFranchiseBreadcrumbs) {\r\n  const { franchiseId, year } = props\r\n  const classes = useStyles()\r\n  return (\r\n    <Breadcrumbs className={classes.breadcrumbMargin} separator={<NavigateNextIcon fontSize=\"small\" />}>\r\n      <Link color=\"inherit\" href=\"/\">\r\n        Home\r\n      </Link>\r\n      {franchiseId ?\r\n      <Link color=\"inherit\" href=\"/#/franchises\">\r\n        Franchises\r\n      </Link> :\r\n      <Typography color=\"textPrimary\">Franchises</Typography>}\r\n      {franchiseId && year ?\r\n      <Link color=\"inherit\" href={`/#/franchises/${franchiseId}`}>\r\n        {franchiseId}\r\n      </Link> :\r\n      <Typography color=\"textPrimary\">{franchiseId}</Typography>}\r\n      {year &&\r\n      <Typography color=\"textPrimary\">{year}</Typography>}\r\n    </Breadcrumbs>\r\n  )\r\n}\r\n","import { Link } from '@material-ui/core'\r\nimport { observer } from 'mobx-react-lite'\r\nimport MUIDataTable from 'mui-datatables'\r\nimport React from 'react'\r\nimport { useFranchiseStore } from '../contexts/FranchiseContext'\r\nimport FranchiseBreadcrumbs from './FranchiseBreadcrumbs'\r\n\r\nconst Franchises: React.FC = () => {\r\n  const franchiseStore = useFranchiseStore()\r\n  const { franchises } = franchiseStore\r\n\r\n  const options = {\r\n    pagination: false,\r\n    print: false,\r\n    selectableRows: \"none\" as const\r\n  }\r\n\r\n  const columns=[\r\n    {\r\n      name: \"Current_Franchise_ID\",\r\n      label: 'Current Franchise ID',\r\n      options: {\r\n        filter: true,\r\n        sort: true,\r\n      }\r\n    },\r\n    {\r\n      name: \"Franchise_ID\",\r\n      label: 'Franchise ID',\r\n      options: {\r\n        filter: true,\r\n        sort: true,\r\n        customBodyRender: (value: any) => (\r\n          <Link href={`/#/franchises/${value}`}>\r\n            {value}\r\n          </Link>\r\n        )\r\n      }\r\n    },\r\n    {\r\n      name: \"League\",\r\n      label: \"League\",\r\n      options: {\r\n        filter: true,\r\n        sort: true,\r\n      }\r\n    },\r\n    {\r\n      name: \"Division\",\r\n      label: 'Division',\r\n      options: {\r\n        filter: true,\r\n        sort: true,\r\n      }\r\n    },\r\n    {\r\n      name: \"Location_Name\",\r\n      label: 'Location Name',\r\n      options: {\r\n        filter: true,\r\n        sort: true,\r\n      }\r\n    },\r\n    {\r\n      name: \"Nickname\",\r\n      label: 'Nickname',\r\n      options: {\r\n        filter: true,\r\n        sort: true,\r\n      }\r\n    },\r\n    {\r\n      name: \"Alternate_Nicknames\",\r\n      label: \"Alternate Nicknames\",\r\n      options: {\r\n        filter: true,\r\n        sort: true,\r\n      }\r\n    },\r\n    {\r\n      name: \"First_Date_Nickname_Used\",\r\n      label: 'Used From',\r\n      options: {\r\n        filter: false,\r\n        sort: true,\r\n      }\r\n    },\r\n    {\r\n      name: \"Last_Date_Nickname_Used\",\r\n      label: 'Used Until',\r\n      options: {\r\n        filter: false,\r\n        sort: true,\r\n      }\r\n    },\r\n    {\r\n      name: \"City\",\r\n      label: 'City',\r\n      options: {\r\n        filter: true,\r\n        sort: true,\r\n      }\r\n    },\r\n    {\r\n      name: \"State\",\r\n      label: \"State\",\r\n      options: {\r\n        filter: true,\r\n        sort: true,\r\n      }\r\n    },\r\n  ]\r\n\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <FranchiseBreadcrumbs />\r\n      {franchises?.length > 0 &&\r\n      <MUIDataTable\r\n        title={\"Franchises\"}\r\n        columns={columns}\r\n        data={franchises}\r\n        options={options}\r\n      />}\r\n    </React.Fragment>\r\n  )\r\n}\r\n\r\nexport default observer(Franchises)\r\n","import { Avatar, Button, Card, CardActions, CardContent, CardHeader, Collapse, Divider, Grid, Link, Typography } from '@material-ui/core'\r\nimport { observer } from 'mobx-react-lite'\r\nimport React, { useEffect, useState } from 'react'\r\nimport { IFranchise } from '../stores/IFranchise'\r\nimport ExpandMoreIcon from '@material-ui/icons/ExpandMore'\r\nimport ExpandLessIcon from '@material-ui/icons/ExpandLess'\r\n\r\ninterface IFranchiseCard {\r\n  franchise: IFranchise\r\n}\r\n\r\nconst FranchiseCard: React.FC<IFranchiseCard> = (props) => {\r\n  const { franchise } = props\r\n  const [expanded, setExpanded] = useState<boolean>(false)\r\n  const [yearsArray, setYearsArray] = useState<Array<number>>([])\r\n  const startYear = parseInt(franchise.First_Date_Nickname_Used?.slice(-4) || new Date().getFullYear().toString())\r\n  const endYear = parseInt(franchise.Last_Date_Nickname_Used?.slice(-4) || new Date().getFullYear().toString())\r\n  \r\n  useEffect(() => {\r\n    const years = Array.from({length: (endYear - startYear + 1)},(v,k)=>k + startYear)\r\n    setYearsArray(years)\r\n  }, [])\r\n\r\n  const handleClick = () => {\r\n    setExpanded(!expanded)\r\n  }\r\n\r\n  return (\r\n    <Grid item xs={6}>\r\n      <Card variant=\"outlined\">\r\n        <CardHeader\r\n          avatar={\r\n            <Avatar>\r\n              {franchise.Location_Name?.substring(0, 1)}\r\n            </Avatar>\r\n          }\r\n          title={`${franchise.Location_Name} ${franchise.Nickname}`}\r\n          subheader={`${franchise.First_Date_Nickname_Used} - ${franchise.Last_Date_Nickname_Used}`}\r\n        />\r\n        <CardContent>\r\n          <Grid container justify=\"space-evenly\">\r\n            <Grid item>\r\n              <Typography>{`${franchise.City}, ${franchise.State}`}</Typography>\r\n            </Grid>\r\n            <Grid item xs={1}>\r\n              <Divider orientation=\"vertical\" />\r\n            </Grid>\r\n            <Grid item>\r\n              <Typography>{`${franchise.League} ${franchise.Division}`}</Typography>\r\n            </Grid>\r\n          </Grid>\r\n        </CardContent>\r\n        <CardActions>\r\n          <Button\r\n            size=\"small\"\r\n            onClick={handleClick}\r\n            startIcon={expanded ? <ExpandLessIcon /> : <ExpandMoreIcon />}\r\n          >\r\n            {expanded ? 'Hide Schedules' : 'Show Schedules'}\r\n          </Button>\r\n        </CardActions>\r\n        <Collapse in={expanded} timeout=\"auto\" unmountOnExit>\r\n          <CardContent>\r\n            <Grid container spacing={2}>\r\n            {yearsArray.length > 0 ? yearsArray.map((year: number) =>\r\n              <Grid item xs={2}>\r\n                <Link href={`/#/franchises/${franchise.Franchise_ID}/schedule/${year}`}>{year}</Link>\r\n              </Grid>\r\n            ) : null}\r\n            </Grid>\r\n          </CardContent>\r\n        </Collapse>\r\n      </Card>\r\n    </Grid>\r\n  )\r\n}\r\n\r\nexport default observer(FranchiseCard)\r\n","import { Grid, Typography } from '@material-ui/core'\r\nimport { observer } from 'mobx-react-lite'\r\nimport React from 'react'\r\nimport { useParams } from 'react-router-dom'\r\nimport { useFranchiseStore } from '../contexts/FranchiseContext'\r\nimport { IFranchise } from '../stores/IFranchise'\r\nimport FranchiseCard from './FranchiseCard'\r\nimport FranchiseBreadcrumbs from './FranchiseBreadcrumbs'\r\n\r\nconst Franchise: React.FC = () => {\r\n  const { franchiseId } = useParams<{ franchiseId: string }>()\r\n  const franchiseStore = useFranchiseStore()\r\n  const { franchises } = franchiseStore\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <FranchiseBreadcrumbs franchiseId={franchiseId} />\r\n      <Typography variant=\"h6\" gutterBottom>Franchise cards for {franchiseId}</Typography>\r\n      <Grid container spacing={2}>\r\n        {franchises?.map((franchise: IFranchise, index: number) =>\r\n          franchise.Franchise_ID === franchiseId ?\r\n            <FranchiseCard franchise={franchise} key={index} /> : null\r\n        )}\r\n      </Grid>\r\n    </React.Fragment>\r\n  )\r\n}\r\n\r\nexport default observer(Franchise)\r\n","import { createStyles, Link, makeStyles, Paper, Typography } from '@material-ui/core'\r\nimport React from 'react'\r\nimport GenericBreadcrumbs from './GenericBreadcrumbs'\r\n\r\nconst useStyles = makeStyles(() =>\r\n  createStyles({\r\n    sectionHeader: {\r\n      fontFamily: '\"Courier New\",Courier,monospace',\r\n      fontWeight: 'bold'\r\n    },\r\n    sectionBreak: {\r\n      marginBottom: '20px'\r\n    },\r\n    paper: {\r\n      padding: '20px',\r\n      margin: '20px 20px',\r\n      backgroundColor: '#e8e8e8'\r\n    },\r\n    container: {\r\n      width: '65%'\r\n    },\r\n    code: {\r\n      backgroundColor: '#e8e8e8',\r\n      borderRadius: '5px',\r\n      padding: '5px'\r\n    },\r\n    dateStamp: {\r\n      flex: 1\r\n    }\r\n  })\r\n)\r\n\r\nconst About: React.FC = () => {\r\n  const classes = useStyles()\r\n\r\n  return (\r\n    <div className={classes.container}>\r\n      <GenericBreadcrumbs breadcrumb=\"About\" />\r\n      <Typography align=\"right\" className={classes.dateStamp}>February 24, 2021</Typography>\r\n      <Typography variant=\"h5\" className={classes.sectionHeader}>What's all this then</Typography>\r\n      <Typography variant=\"body1\" className={classes.sectionBreak}>\r\n        For quite a while I've been wanting to build a web application that makes use of baseball data.\r\n        I had what seemed like a pretty simple goal for it: I wanted it to be something that I would use \r\n        to look up baseball data or statistics or the boxscore from a certain game. But I could never quite \r\n        get a fully functional application running. I would start out pretty well by scraping or \r\n        downloading/parsing/cleaning data from somewhere and then run out of steam when it came time to \r\n        figure out how to host the data, let alone come up with a way to show and interact with it. Now \r\n        don't get me wrong, I don't think that what I describe below is the fully-functional baseball \r\n        application of my dreams. But what I've put together is a good step in that direction. \r\n        I think it's a solid foundation and it's something that I hope to continue to work on.\r\n      </Typography>\r\n      <Typography variant=\"h5\" className={classes.sectionHeader}>Let's get started</Typography>\r\n      <Typography variant=\"body1\" className={classes.sectionBreak}>\r\n        The entire system&mdash;if you will&mdash;is currently made up of two different GitHub repositories:\r\n        <Paper elevation={3} className={classes.paper}>\r\n          <Link href='https://github.com/mbents/mbents.github.io'>\r\n            https://github.com/mbents/mbents.github.io\r\n          </Link>\r\n          <br />\r\n          <Link href='https://github.com/mbents/rs-data'>\r\n            https://github.com/mbents/rs-data\r\n          </Link>\r\n        </Paper>\r\n        The web application was created using Create React App \r\n        (<Link href='https://github.com/facebook/create-react-app'>\r\n          https://github.com/facebook/create-react-app\r\n        </Link>) and is hosted on GitHub using GitHub Pages. I found a lot of different tutorials for doing this. \r\n        Here are the ones that I found most useful:\r\n        <Paper elevation={3} className={classes.paper}>\r\n          <Link href='https://create-react-app.dev/docs/deployment/#github-pages'>\r\n            https://create-react-app.dev/docs/deployment/#github-pages\r\n          </Link>\r\n          <br/>\r\n          <Link href='https://dev.to/yuribenjamin/how-to-deploy-react-app-in-github-pages-2a1f'>\r\n            https://dev.to/yuribenjamin/how-to-deploy-react-app-in-github-pages-2a1f\r\n          </Link>\r\n        </Paper>\r\n        <span className={classes.code}>gh-pages</span> is a package that helps publish your website. \r\n        There's a handy deploy step that packages up your site's files and pushes them to a branch on GitHub. \r\n        My web application also uses <span className={classes.code}>mobx-state-tree</span> for state management \r\n        and <span className={classes.code}>Material-UI</span> to build the UI.\r\n      </Typography>\r\n      <Typography variant=\"body1\" className={classes.sectionBreak}>\r\n        The backend data is also hosted via GitHub Pages. Basically it's a static API that only serves data \r\n        to <span className={classes.code}>GET</span> requests, but that's really all I needed and it's easy to do. \r\n        I originally got the idea from this post:\r\n        <Paper elevation={3} className={classes.paper}>\r\n          <Link href='https://dev.to/matmooredev/can-you-host-a-read-only-api-on-github-pages-1jib'>\r\n            https://dev.to/matmooredev/can-you-host-a-read-only-api-on-github-pages-1jib\r\n          </Link>\r\n        </Paper>\r\n        The repository itself is a collection of historical baseball data that I downloaded from a website \r\n        called Retrosheet (<Link href='https://www.retrosheet.org/'>https://www.retrosheet.org/</Link>). \r\n        I parsed the event files using a couple utilities that I had created several years ago:\r\n        <Paper elevation={3} className={classes.paper}>\r\n          <Link href='https://github.com/mbents/retrosheet-download-dotnet'>\r\n            https://github.com/mbents/retrosheet-download-dotnet\r\n          </Link><br />\r\n          <Link href='https://github.com/mbents/csv-to-json'>\r\n            https://github.com/mbents/csv-to-json\r\n          </Link>\r\n        </Paper>\r\n        They both still worked, which was pretty cool! The first project was written in C# and uses an executable \r\n        found on the Retrosheet website called <span className={classes.code}>BGAME</span> to parse the files \r\n        into CSV files. The second utility is a Node.js application that converts the CSV files to JSON. After everything\r\n        was parsed and I pushed the changes, I had a basic API up and running.\r\n      </Typography>\r\n      <Typography variant=\"h5\" className={classes.sectionHeader}>Gotcha!</Typography>\r\n      <Typography variant=\"body1\" className={classes.sectionBreak}>\r\n        A nice thing, in my opinion, about doing it this way is I can access the data just using the URL to the directory. \r\n        For example, this will return JSON data:\r\n        <Paper elevation={3} className={classes.paper}>\r\n          <Link href='https://mbents.github.io/rs-data/ballparks/'>\r\n            https://mbents.github.io/rs-data/ballparks/\r\n          </Link>\r\n        </Paper>\r\n        I don't need to specify <span className={classes.code}>index.json</span> in the \r\n        URL&mdash;which is the file located in the <span className={classes.code}>/ballparks</span> directory&mdash;but \r\n        it's important that it's there. \r\n        Because I'm fetching the directory and the directory contains a file named <span className={classes.code}>index.json</span>, the data returned will be the \r\n        contents of that file. This is a nice (possibly undocumented?) feature of GitHub, apparently.\r\n      </Typography>\r\n      <Typography variant=\"body1\" className={classes.sectionBreak}>\r\n        There are a couple things to take note of from this guide:\r\n        <Paper elevation={3} className={classes.paper}>\r\n          <Link href='https://create-react-app.dev/docs/deployment/#github-pages'>\r\n            https://create-react-app.dev/docs/deployment/#github-pages\r\n          </Link>\r\n        </Paper>\r\n        If you want to point a domain to your GitHub Pages project, you'll have to add a <span className={classes.code}>CNAME</span> file \r\n        to your repository, as noted in Step 5.<br />\r\n        Also, if your React application uses client-side routing, you might need to make some changes. My app \r\n        uses <span className={classes.code}>React Router</span> and I switched from the \r\n        common <span className={classes.code}>Router</span> to use <span className={classes.code}>HashRouter</span>.<br />\r\n        One more thing: I strongly recommend NOT tweaking the <span className={classes.code}>package.json</span> scripts \r\n        to push deployments to your main branch. In hindsight, it seems pretty obvious. However, at the time, I \r\n        didn't consider that all my React code was going to be overwritten by \r\n        the <span className={classes.code}>gh-pages</span> deployment process. \r\n      </Typography>\r\n      <Typography variant=\"h5\" className={classes.sectionHeader}>Conclusion</Typography>\r\n      <Typography variant=\"body1\" className={classes.sectionBreak}>\r\n        I certainly didn't intend for this to be a step-by-step guide for creating a React application \r\n        using a GitHub Pages repository as an API, but here we are. I mainly put this together because \r\n        I know that, given the way I start and stop my personal projects, at some point I will need \r\n        to reference this material again. If you're here and you aren't me, then I hope that this was \r\n        useful to you!\r\n      </Typography>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default About\r\n","import { createContext, useContext } from \"react\"\r\nimport { IScheduleStore } from '../stores/ISchedule'\r\n\r\nexport const ScheduleContext = createContext<any>(null)\r\n\r\ninterface IMapState {\r\n  (store: IScheduleStore): any\r\n}\r\n\r\nexport function useScheduleStore(mapState?: IMapState): any {\r\n  const store = useContext(ScheduleContext)\r\n\r\n  if (mapState) {\r\n    return mapState(store)\r\n  }\r\n\r\n  return store\r\n}\r\n","import { Card, CardHeader, Grid, Typography } from '@material-ui/core'\r\nimport { observer } from 'mobx-react-lite'\r\nimport React from 'react'\r\nimport { useScheduleStore } from '../contexts/ScheduleContext'\r\nimport { IScheduledGame } from '../stores/ISchedule'\r\nimport FranchiseBreadcrumbs from './FranchiseBreadcrumbs'\r\n\r\ninterface ISchedule {\r\n  showBreadcrumbs?: boolean\r\n}\r\n\r\nconst Schedule: React.FC<ISchedule> = (props) => {\r\n  const scheduleStore = useScheduleStore()\r\n  const { scheduledGames, franchiseId, year, date } = scheduleStore\r\n  const { showBreadcrumbs } = props\r\n\r\n  const parseDate = (date: string | undefined) => {\r\n    if (date) {\r\n      const parsedDateStr = `${date.slice(4, 6)}-${date.slice(-2)}-${date.slice(0, 4)}`\r\n      return new Date(parsedDateStr).toDateString()\r\n    } else {\r\n      return 'Unknown date'\r\n    }\r\n  }\r\n\r\n  const parseTimeOfDay = (timeOfDay: string | undefined) => {\r\n    switch (timeOfDay?.toUpperCase()) {\r\n      case 'D':\r\n        return 'Day'\r\n      case 'N':\r\n        return 'Night'\r\n      case 'A':\r\n        return 'Afternoon'\r\n      case 'E':\r\n        return 'Evening'\r\n      default:\r\n        return 'Unknown'\r\n    }\r\n  }\r\n  \r\n  return (\r\n    <React.Fragment>\r\n      {showBreadcrumbs &&\r\n      <FranchiseBreadcrumbs franchiseId={franchiseId} year={year} />}\r\n      {franchiseId && year ?\r\n      <Typography variant=\"h6\">{`Schedule for ${franchiseId} from ${year}`}</Typography> :\r\n      <Typography variant=\"h6\">{`Schedule for ${date}`}</Typography>\r\n      }\r\n      <Grid container spacing={1}>\r\n      {scheduledGames?.length > 0 ? scheduledGames.map((game: IScheduledGame, index: number) =>\r\n        <Grid item xs={4} key={`${game.date}-${game.game_number}-${index}`}>\r\n          <Card key={`${index}-${game.date}`} variant=\"outlined\">\r\n            <CardHeader\r\n              title={`${game.visiting_team} @ ${game.home_team}`}\r\n              subheader={`${parseDate(game.date)} | Time of day: ${parseTimeOfDay(game.time_of_day)}`}\r\n            />\r\n          </Card>\r\n        </Grid>\r\n      ) : <Typography variant=\"h6\">No games to display.</Typography>}\r\n      </Grid>\r\n    </React.Fragment>\r\n  )\r\n}\r\n\r\nexport default observer(Schedule)\r\n","import { applySnapshot, flow, types } from \"mobx-state-tree\"\r\nimport { IScheduledGame } from \"../stores/ISchedule\"\r\n\r\nconst ScheduledGame = types.model('Schedule', {\r\n  date: types.string,\r\n  game_number: types.string,\r\n  day_of_week: types.string,\r\n  visiting_team: types.string,\r\n  visiting_team_league: types.string,\r\n  visiting_team_game_number: types.string,\r\n  home_team: types.string,\r\n  home_team_league: types.string,\r\n  home_team_game_number: types.string,\r\n  time_of_day: types.string,\r\n  postponement_explanation: types.string,\r\n  makeup_date: types.string\r\n})\r\n\r\nexport const ScheduleStore = types.model('ScheduleStore', {\r\n  year: types.optional(types.maybeNull(types.string), null),\r\n  franchiseId: types.optional(types.maybeNull(types.string), null),\r\n  date: types.optional(types.maybeNull(types.string), null),\r\n  scheduledGames: types.optional(types.maybeNull(types.array(ScheduledGame)), null)\r\n}).actions(self => {\r\n  const load = flow(function* () {\r\n    if (self.year && self.franchiseId) {\r\n      const response = yield fetch(`https://www.mikebents.com/rs-data/schedules/${self.year}SKED.json`)\r\n      const json = yield response.json()\r\n      if (self.franchiseId) {\r\n        const franchiseGames = json.filter((item: IScheduledGame) => item.visiting_team === self.franchiseId || item.home_team === self.franchiseId)\r\n        applySnapshot(self, {year: self.year, franchiseId: self.franchiseId, date: self.date, scheduledGames: [...franchiseGames]})\r\n      } else {\r\n        applySnapshot(self, {year: self.year, franchiseId: self.franchiseId, date: self.date, scheduledGames: [...json]})\r\n      }\r\n    } else if (self.date) {\r\n      const tempYear = self.date.slice(0, 4)\r\n      const tempDate = self.date.replaceAll('-', '')\r\n      const response = yield fetch(`https://www.mikebents.com/rs-data/schedules/${tempYear}SKED.json`)\r\n      const json = yield response.json()\r\n      const gamesByDate = json.filter((item: IScheduledGame) => item.date === tempDate)\r\n      applySnapshot(self, {year: tempYear, franchiseId: self.franchiseId, date: self.date, scheduledGames: [...gamesByDate]})\r\n    }\r\n  })\r\n\r\n  return {\r\n    load,\r\n    afterCreate() {\r\n      load()\r\n    }\r\n  }\r\n})\r\n","import React, { useState } from 'react'\r\nimport { useParams } from 'react-router-dom'\r\nimport { ScheduleContext } from '../contexts/ScheduleContext'\r\nimport { ScheduleStore } from '../models/Schedule'\r\n\r\nconst ScheduleProvider = ({ children, selectedFranchise, selectedYear, selectedDate }: any) => {\r\n  const { franchiseId, year } = useParams<{ franchiseId: string, year: string }>()\r\n  const scheduleStore = ScheduleStore.create({\r\n    year: year || selectedYear || '',\r\n    franchiseId: franchiseId || selectedFranchise || '',\r\n    date: selectedDate || '',\r\n    scheduledGames: []\r\n  })\r\n\r\n  const { Provider } = ScheduleContext\r\n  return (\r\n    <Provider value={scheduleStore}>\r\n      {children}\r\n    </Provider>\r\n  )\r\n}\r\n\r\nexport default ScheduleProvider\r\n","import { Button, Divider, FormControl, Grid, InputLabel, makeStyles, Select, TextField, Typography } from '@material-ui/core'\r\nimport { observer } from 'mobx-react-lite'\r\nimport React, { ChangeEvent, useEffect, useState } from 'react'\r\nimport { useFranchiseStore } from '../contexts/FranchiseContext'\r\nimport ScheduleProvider from '../providers/ScheduleProvider'\r\nimport { IFranchise } from '../stores/IFranchise'\r\nimport Schedule from './Schedule'\r\nimport GenericBreadcrumbs from './GenericBreadcrumbs'\r\n\r\nconst Schedules: React.FC = () => {\r\n  const franchiseStore = useFranchiseStore()\r\n  const { franchises } = franchiseStore\r\n  const [selectedFranchiseId, setSelectedFranchiseId] = useState('')\r\n  const [selectedYear, setSelectedYear] = useState('')\r\n  const [selectedDate, setSelectedDate] = useState('')\r\n  const [showDateSearch, setShowDateSearch] = useState<boolean>(false)\r\n  const [showFranchiseSearch, setShowFranchiseSearch] = useState<boolean>(false)\r\n  const [yearsArray, setYearsArray] = useState<Array<number>>([])\r\n\r\n  const handleFranchiseChange = (event: ChangeEvent<any>) => {\r\n    setSelectedFranchiseId(event.target.value)\r\n  }\r\n\r\n  const handleYearChange = (event: ChangeEvent<any>) => {\r\n    setSelectedYear(event.target.value)\r\n  }\r\n\r\n  const handleDateChange = (event: ChangeEvent<any>) => {\r\n    setSelectedDate(event.target.value)\r\n  }\r\n\r\n  const handleClick = (source: 'franchise' | 'date') => {\r\n    if (source === 'date') {\r\n      setSelectedFranchiseId('')\r\n      setSelectedYear('')\r\n      setShowDateSearch(true)\r\n      setShowFranchiseSearch(false)\r\n    } else if (source === 'franchise') {\r\n      setSelectedDate('')\r\n      setShowFranchiseSearch(true)\r\n      setShowDateSearch(false)\r\n    }\r\n  }\r\n\r\n  const getYear = (date: string | undefined) => {\r\n    return date ? date.slice(-4) : 'present'\r\n  }\r\n\r\n  useEffect(() => {\r\n    const years = Array.from({length: (2020 - 1877 + 1)},(v,k)=>k + 1877)\r\n    setYearsArray(years)\r\n  }, [])\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <GenericBreadcrumbs breadcrumb=\"Schedules\" />\r\n      <Typography variant=\"h6\">Schedule search</Typography>\r\n      <Grid container spacing={2}>\r\n        <Grid item>\r\n          <FormControl variant=\"outlined\">\r\n            <InputLabel htmlFor=\"franchises\">Team</InputLabel>\r\n            <Select\r\n              id=\"franchises\"\r\n              label=\"Team\"\r\n              autoWidth\r\n              native\r\n              onChange={handleFranchiseChange}\r\n              value={selectedFranchiseId}\r\n            >\r\n              <option value=\"\" />\r\n              {franchises.map((item: IFranchise, index: number) =>\r\n                <option key={`${item.Current_Franchise_ID}-${index}`} value={item.Current_Franchise_ID}>\r\n                  {`[${item.Current_Franchise_ID}] ${item.Location_Name} ${item.Nickname} \r\n                  (${getYear(item.First_Date_Nickname_Used)}-${getYear(item.Last_Date_Nickname_Used)})`}\r\n                </option>\r\n              )}\r\n            </Select>\r\n          </FormControl>\r\n        </Grid>\r\n        <Grid item xs>\r\n          <FormControl variant=\"outlined\">\r\n            <InputLabel htmlFor=\"year\">Year</InputLabel>\r\n            <Select\r\n              id=\"year\"\r\n              label=\"Year\"\r\n              autoWidth\r\n              native\r\n              onChange={handleYearChange}\r\n              value={selectedYear}\r\n            >\r\n              <option value=\"\" />\r\n              {yearsArray.sort((a: number, b: number) => b - a).map((year: number) =>\r\n                <option key={year} value={year}>{year}</option>\r\n              )}\r\n            </Select>\r\n          </FormControl>\r\n        </Grid>\r\n        <Grid item>\r\n          <Button variant=\"contained\" size=\"large\" color=\"primary\" onClick={() => handleClick('franchise')}>\r\n            Search\r\n          </Button>\r\n        </Grid>\r\n        <Grid item style={{flexGrow: 1}}>\r\n          <Divider orientation=\"vertical\" />\r\n        </Grid>\r\n        <Grid item>\r\n          <TextField\r\n            id=\"date\"\r\n            variant=\"outlined\"\r\n            type=\"date\"\r\n            onChange={handleDateChange}\r\n          />\r\n        </Grid>\r\n        <Grid item>\r\n          <Button variant=\"contained\" size=\"large\" color=\"primary\" onClick={() => handleClick('date')}>\r\n            Search\r\n          </Button>\r\n        </Grid>\r\n      </Grid>\r\n      <Grid container spacing={2}>\r\n        <Grid item xs><Divider /></Grid>\r\n      </Grid>\r\n      <Grid container spacing={2}>\r\n        <Grid item>\r\n          {showDateSearch ?\r\n            <ScheduleProvider\r\n              selectedDate={selectedDate}\r\n              selectedFranchise={''}\r\n              selectedYear={''}\r\n            >\r\n              <Schedule />\r\n            </ScheduleProvider> : showFranchiseSearch ?\r\n            <ScheduleProvider\r\n              selectedFranchise={selectedFranchiseId}\r\n              selectedYear={selectedYear}\r\n              selectedDate={''}\r\n            >\r\n              <Schedule />\r\n            </ScheduleProvider> : null}\r\n        </Grid>\r\n      </Grid>\r\n    </React.Fragment>\r\n  )\r\n}\r\n\r\nexport default observer(Schedules)\r\n","import { applySnapshot, flow, types } from \"mobx-state-tree\"\r\n\r\nconst Ballpark = types.model('Ballpark', {\r\n  PARKID: types.string,\r\n  NAME: types.string,\r\n  AKA: types.string,\r\n  CITY: types.string,\r\n  STATE: types.string,\r\n  START: types.string,\r\n  END: types.string,\r\n  LEAGUE: types.string,\r\n  NOTES: types.string\r\n})\r\n\r\nexport const BallparkStore = types.model('BallparkStore', {\r\n  ballparks: types.optional(types.maybeNull(types.array(Ballpark)), null)\r\n}).actions(self => {\r\n  const load = flow(function* loadData() {\r\n    const response = yield fetch('https://www.mikebents.com/rs-data/ballparks/')\r\n    const json = yield response.json()\r\n    applySnapshot(self, {ballparks: [...json]})\r\n  })\r\n  \r\n  return {\r\n    load,\r\n    afterCreate() {\r\n      load()\r\n    }\r\n  }\r\n})\r\n","import React, { useEffect, useState } from 'react'\r\nimport { BallparkStore } from '../models/Ballpark'\r\nimport { BallparkContext } from '../contexts/BallparkContext'\r\n\r\nconst BallparkProvider = ({ children }: any) => {\r\n  const [ballparkStore] = useState(BallparkStore.create({ballparks: []}))\r\n\r\n  // useEffect(() => {\r\n  //   console.log(\"hello\")\r\n  //   // window.store = ballparkStore\r\n  // }, [ballparkStore])\r\n\r\n  const { Provider } = BallparkContext\r\n  return (\r\n    <Provider value={ballparkStore}>\r\n      {children}\r\n    </Provider>\r\n  )\r\n}\r\n\r\nexport default BallparkProvider\r\n","import { applySnapshot, flow, types } from \"mobx-state-tree\"\r\n\r\nconst Franchise = types.model('Franchise', {\r\n  Current_Franchise_ID: types.string,\r\n  Franchise_ID: types.string,\r\n  League: types.string,\r\n  Division: types.string,\r\n  Location_Name: types.string,\r\n  Nickname: types.string,\r\n  Alternate_Nicknames: types.string,\r\n  First_Date_Nickname_Used: types.string,\r\n  Last_Date_Nickname_Used: types.string,\r\n  City: types.string,\r\n  State: types.string\r\n})\r\n\r\nexport const FranchiseStore = types.model('FranchiseStore', {\r\n  franchises: types.optional(types.maybeNull(types.array(Franchise)), null)\r\n}).actions(self => {\r\n  const load = flow(function* loadData() {\r\n    const response = yield fetch('https://www.mikebents.com/rs-data/franchises/')\r\n    const json = yield response.json()\r\n    applySnapshot(self, {franchises: [...json]})\r\n  })\r\n  \r\n  return {\r\n    load,\r\n    afterCreate() {\r\n      load()\r\n    }\r\n  }\r\n})\r\n","import React, { useState } from 'react'\r\nimport { FranchiseStore } from '../models/Franchise'\r\nimport { FranchiseContext } from '../contexts/FranchiseContext'\r\n\r\nconst FranchiseProvider = ({ children }: any) => {\r\n  const [franchiseStore] = useState(FranchiseStore.create({franchises: []}))\r\n\r\n  const { Provider } = FranchiseContext\r\n  return (\r\n    <Provider value={franchiseStore}>\r\n      {children}\r\n    </Provider>\r\n  )\r\n}\r\n\r\nexport default FranchiseProvider\r\n","import { AppBar, Badge, Collapse, Container, CssBaseline, Divider, Drawer, IconButton, List, ListItem, ListItemText, makeStyles, Toolbar, Typography, useTheme } from '@material-ui/core'\r\nimport { Switch, Route, Link, HashRouter } from 'react-router-dom'\r\nimport React, { useState } from 'react'\r\nimport './App.css'\r\nimport clsx from 'clsx'\r\nimport MenuIcon from '@material-ui/icons/Menu'\r\nimport ChevronLeftIcon from '@material-ui/icons/ChevronLeft'\r\nimport ChevronRightIcon from '@material-ui/icons/ChevronRight'\r\nimport ListItemIcon from '@material-ui/core/ListItemIcon'\r\nimport HomeIcon from '@material-ui/icons/Home'\r\nimport EventSeatIcon from '@material-ui/icons/EventSeat'\r\nimport GroupIcon from '@material-ui/icons/Group'\r\nimport PersonIcon from '@material-ui/icons/Person'\r\nimport GitHubIcon from '@material-ui/icons/GitHub'\r\nimport TwitterIcon from '@material-ui/icons/Twitter'\r\nimport CalendarTodayIcon from '@material-ui/icons/CalendarToday'\r\nimport SportsBaseballIcon from '@material-ui/icons/SportsBaseball'\r\nimport ExpandMore from '@material-ui/icons/ExpandMore'\r\nimport ExpandLess from '@material-ui/icons/ExpandLess'\r\nimport Home from './components/Home'\r\nimport Ballparks from './components/Ballparks'\r\nimport Franchises from './components/Franchises'\r\nimport Franchise from './components/Franchise'\r\nimport About from './components/About'\r\nimport Schedule from './components/Schedule'\r\nimport Schedules from './components/Schedules'\r\nimport BallparkProvider from './providers/BallparkProvider'\r\nimport FranchiseProvider from './providers/FranchiseProvider'\r\nimport ScheduleProvider from './providers/ScheduleProvider'\r\n\r\nconst drawerWidth = 240\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    display: 'flex',\r\n  },\r\n  appBar: {\r\n    zIndex: theme.zIndex.drawer + 1,\r\n    transition: theme.transitions.create(['width', 'margin'], {\r\n      easing: theme.transitions.easing.sharp,\r\n      duration: theme.transitions.duration.leavingScreen,\r\n    }),\r\n  },\r\n  appBarShift: {\r\n    marginLeft: drawerWidth,\r\n    width: `calc(100% - ${drawerWidth}px)`,\r\n    transition: theme.transitions.create(['width', 'margin'], {\r\n      easing: theme.transitions.easing.sharp,\r\n      duration: theme.transitions.duration.enteringScreen,\r\n    }),\r\n  },\r\n  menuButton: {\r\n    marginRight: 36,\r\n  },\r\n  hide: {\r\n    display: 'none',\r\n  },\r\n  drawer: {\r\n    width: drawerWidth,\r\n    flexShrink: 0,\r\n    whiteSpace: 'nowrap',\r\n  },\r\n  drawerOpen: {\r\n    width: drawerWidth,\r\n    transition: theme.transitions.create('width', {\r\n      easing: theme.transitions.easing.sharp,\r\n      duration: theme.transitions.duration.enteringScreen,\r\n    }),\r\n  },\r\n  drawerClose: {\r\n    transition: theme.transitions.create('width', {\r\n      easing: theme.transitions.easing.sharp,\r\n      duration: theme.transitions.duration.leavingScreen,\r\n    }),\r\n    overflowX: 'hidden',\r\n    width: theme.spacing(7) + 1,\r\n    [theme.breakpoints.up('sm')]: {\r\n      width: theme.spacing(9) + 1,\r\n    },\r\n  },\r\n  toolbar: {\r\n    display: 'flex',\r\n    alignItems: 'center',\r\n    justifyContent: 'flex-end',\r\n    padding: theme.spacing(0, 1),\r\n    ...theme.mixins.toolbar,\r\n  },\r\n  content: {\r\n    flexGrow: 1,\r\n    padding: theme.spacing(3),\r\n  },\r\n  badgeSection: {\r\n    float: 'right',\r\n    display: 'none',\r\n    [theme.breakpoints.up('md')]: {\r\n      display: 'flex',\r\n    },\r\n  },\r\n  grow: {\r\n    flexGrow: 1,\r\n  },\r\n  toolbarHeader: {\r\n    fontFamily: '\"Courier New\",Courier,monospace'\r\n  }\r\n}))\r\n\r\nfunction App() {\r\n  const classes = useStyles()\r\n  const theme = useTheme()\r\n  const [open, setOpen] = useState(false)\r\n  const [showBaseball, setShowBaseball] = useState(false)\r\n\r\n  const handleDrawerOpen = () => {\r\n    setOpen(true)\r\n  }\r\n\r\n  const handleDrawerClose = () => {\r\n    setOpen(false)\r\n  }\r\n\r\n  const handleClick = () => {\r\n    setShowBaseball(!showBaseball)\r\n  }\r\n\r\n  return (\r\n    <div className={classes.root}>\r\n      <HashRouter basename=\"/\">\r\n        <CssBaseline />\r\n        <AppBar\r\n          color=\"default\"\r\n          position=\"fixed\"\r\n          className={clsx(classes.appBar, {\r\n            [classes.appBarShift]: open,\r\n          })}\r\n        >\r\n          <Toolbar>\r\n            <IconButton\r\n              color=\"inherit\"\r\n              aria-label=\"open drawer\"\r\n              onClick={handleDrawerOpen}\r\n              edge=\"start\"\r\n              className={clsx(classes.menuButton, {\r\n                [classes.hide]: open,\r\n              })}\r\n            >\r\n              <MenuIcon />\r\n            </IconButton>\r\n            <Typography variant=\"h4\" className={classes.toolbarHeader} noWrap>\r\n              mikebents.com\r\n            </Typography>\r\n            <div className={classes.grow} />\r\n            <div className={classes.badgeSection}>\r\n              <IconButton title=\"GitHub repos\" color=\"inherit\" href=\"https://github.com/mbents\">\r\n                <Badge color=\"secondary\">\r\n                  <GitHubIcon />\r\n                </Badge>\r\n              </IconButton>\r\n              <IconButton title=\"Twitter\" color=\"inherit\" href=\"https://twitter.com/MikeBents\">\r\n                <Badge color=\"secondary\">\r\n                  <TwitterIcon />\r\n                </Badge>\r\n              </IconButton>\r\n            </div>\r\n          </Toolbar>\r\n        </AppBar>\r\n        <Drawer\r\n          variant=\"permanent\"\r\n          className={clsx(classes.drawer, {\r\n            [classes.drawerOpen]: open,\r\n            [classes.drawerClose]: !open,\r\n          })}\r\n          classes={{\r\n            paper: clsx({\r\n              [classes.drawerOpen]: open,\r\n              [classes.drawerClose]: !open,\r\n            }),\r\n          }}\r\n        >\r\n          <div className={classes.toolbar}>\r\n            <IconButton onClick={handleDrawerClose}>\r\n              {theme.direction === 'rtl' ? <ChevronRightIcon /> : <ChevronLeftIcon />}\r\n            </IconButton>\r\n          </div>\r\n          <Divider />\r\n          <List>\r\n            <ListItem button key=\"home\" component={Link} to=\"/\">\r\n              <ListItemIcon><HomeIcon /></ListItemIcon>\r\n              <ListItemText primary=\"Home\" />\r\n            </ListItem>\r\n            <ListItem button key=\"about\" component={Link} to=\"/about\">\r\n              <ListItemIcon><PersonIcon /></ListItemIcon>\r\n              <ListItemText primary=\"About\" />\r\n            </ListItem>\r\n            <Divider />\r\n            <ListItem button key=\"baseball\" onClick={handleClick}>\r\n              <ListItemIcon>\r\n                <SportsBaseballIcon />\r\n                {showBaseball ? <ExpandLess /> : <ExpandMore />}\r\n              </ListItemIcon>\r\n              <ListItemText primary=\"Baseball stuff\" />\r\n            </ListItem>\r\n            <Collapse in={showBaseball} timeout=\"auto\" unmountOnExit>\r\n              <ListItem button key=\"ballparks\" component={Link} to=\"/ballparks\">\r\n                <ListItemIcon><EventSeatIcon /></ListItemIcon>\r\n                <ListItemText primary=\"Ballparks\" />\r\n              </ListItem>\r\n              <ListItem button key=\"franchises\" component={Link} to=\"/franchises\">\r\n                <ListItemIcon><GroupIcon /></ListItemIcon>\r\n                <ListItemText primary=\"Franchises\" />\r\n              </ListItem>\r\n              <ListItem button key=\"schedules\" component={Link} to=\"/schedules\">\r\n                <ListItemIcon><CalendarTodayIcon /></ListItemIcon>\r\n                <ListItemText primary=\"Schedules\" />\r\n              </ListItem>\r\n            </Collapse>\r\n            <Divider />\r\n          </List>\r\n        </Drawer>\r\n        <main className={classes.content}>\r\n          <div className={classes.toolbar} />\r\n          <Container maxWidth=\"lg\">\r\n            <Switch>\r\n              <Route path=\"/schedules\">\r\n                <FranchiseProvider>\r\n                  <Schedules />\r\n                </FranchiseProvider>\r\n              </Route>\r\n              <Route exact path=\"/franchises\">\r\n                <FranchiseProvider>\r\n                  <Franchises />\r\n                </FranchiseProvider>\r\n              </Route>\r\n              <Route exact path=\"/franchises/:franchiseId\">\r\n                <FranchiseProvider>\r\n                  <Franchise />\r\n                </FranchiseProvider>\r\n              </Route>\r\n              <Route path=\"/franchises/:franchiseId/schedule/:year\">\r\n                <ScheduleProvider>\r\n                  <Schedule showBreadcrumbs={true} />\r\n                </ScheduleProvider>\r\n              </Route>\r\n              <Route path=\"/ballparks\">\r\n                <BallparkProvider>\r\n                  <Ballparks />\r\n                </BallparkProvider>\r\n              </Route>\r\n              <Route path=\"/about\" component={About} />\r\n              <Route path=\"/\" component={Home} />\r\n            </Switch>\r\n          </Container>\r\n        </main>\r\n      </HashRouter>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default App\r\n","import { ReportHandler } from 'web-vitals';\r\n\r\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}